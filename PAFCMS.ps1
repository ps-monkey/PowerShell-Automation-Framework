Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.Application]::EnableVisualStyles()

#Enable TLS12
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

#Define Trust and Accept all certificates policy
If ( -not ("TrustAllCertsPolicy" -as [type])) {
Add-Type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
	public bool CheckValidationResult(
	ServicePoint srvPoint, X509Certificate certificate,
	WebRequest request, int certificateProblem) {
	return true;
	}
}
"@
}
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Ssl3,Tls,Tls11,Tls12'


#################################################################################################################################################################################################
#Check if run as administrator
If (!(([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))) {
[System.Windows.Forms.MessageBox]::Show(("PAFConfig must be ran with administrative permissions.`nPlease use ""Run As Administrator"" context menu to run PAFConfig"),"PAF Configuration",0,16) | out-null
Exit
}

#################################################################################################################################################################################################
#Embedded images
$SearchImg = "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAAAAXNSR0IB2cksfwAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAQJQTFRFAAAAZrteZrteZrteZrteZrteZrteZrteZrteZrteZrteZrteZrtebr9nj82JldCQf8Z4Zrtem9OW4O7eudW3sM+t0OPOy+jIc8BswNm9WptTUpZLfrF41OjTaLdhnsSbkr6NX65XaKRiyt/HUpdLW6dUY6Bd0ePPWaNSZblde692stGvV59QZbhdVJdNzODKbKZmVJtNYrRac8Fs1urUnsSa9vr2sdCufbB4VJlNYK9Ya71klsaS////+fz5kr2NUpZLWKFRi7mGUpZLZrpe/v7+cqptUpZLUpdMXKdUdqxxUpZLUpZLXKhVdqxwUpZLUpZLX61XX65YU5hMXq1XUpdMuwLojAAAAFZ0Uk5TAAVnueb9tlvh/wag/v////+V/////////////////////////////////////////////////////+b//////7f//2j////iBv///lv//5UF////ZwU0QDHDAAABBElEQVR4nE3R2VbCMBAG4KRtKCPIvqiDC4uAIIIruLQgsqig4vb+r+JMEtT/ojnznWROOhGCIx3XU8qLOFKsI/0o2ER9yxuxOPwmHtMq2TYTyZTVNKtPlsnm8oXillGfNlK/zPYOIpZ290xfKRw6m2VD3D8oa3WEC5DIacNKtXbI6AoPIJk3WG8gNo8APKEAUgWDrTZ9jjugGKFYYjvp9ng5PVN8HM4vLiv1VveqP2C9vhERbn17V220e/0gHLKO+EqUzj0VgzAIx7Q+6MtTJk2qhmEwneH80fwm54l0PA2eF8v1QDgvNcTZ6+JtpceUtvpOau3fkD8+58vV3+ztc3x96/IHBLsholb6rC4AAAAASUVORK5CYII="
$UpImg = "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAD/0lEQVR42mL8++8HAwwwMTIxvPr4i+HItQ9sz95/87j59HPI8/ffLX/8+ivK8J+BgZ2N6a0QL9t1JTGeuRpyfNs8TKR+Mv//z8DC8IvhP+N/sBkAAcT4B2jgnz9MICbD4zdfGa48+uSz8eTz6lcfv1v8+fuPgYWZiYGREWIhUC/D33//GZiZGBlE+TlOGyoJtDnriW7QkeMBiv8BqwEIIBaQQf/+MzP8/vOPYe3xZ7V7L72sZ2T8z8zCxMTAysLEgAxABrMwM4IcywB0uenT01/XAq3r1Jblq2ZmAroVaCNAALEwAg1kAmqes+tW5d5LL5pAGkBexwdADmYFqvvHxMy08fTTSjYWpv+xjgrV/4CuBwggJpDmU7deue4GGgbyChPMf0jgz9//DL+APkAHQOUMbEAnrT3xpGLvxRc+33/+ZgAIIKb3X34zrjv+pP733/8sIAPRwW9gOEoJcf5Xl+Zj+InVUFAQ/Gfadu5Fzesvf5gAAohp78XXNneefzFnZ8H0JigCONiY/5cGavxviND5LyHA8R+bS4FeZnj4+psJ0Bw3gABiOnf/XdSPP/9Y0H0KilGgq/+nuar815ThZxLmZWcs9tcEawZZhB6mv/78Zb5w770fQAAxPX//wxyL4xi+/fzD4GYg+c/TWApulYGiAGO8k9L/n7//gS1EBqDIfPL2mxJAADG9+fRTEj3sfvz+y6CvIPA3w0OFkYmRAUUy2FKW0dtE6h8oPP+juJIR5HIxgABiAqYdJtRI+M8gJcj1ryZMh5GPE9PtILsLfNUZ9eT5///6jRqe/4BcgABiEuZjfwkLE3DCZGb8n+qm8k+Ej50RJI4NA2OWMctTlUGIl53hHzw8gXL//78FCCAWJXHeE0/fftMFpnRIWACdsP7EY6Z1xx+DksN/XIkbaDHjf6BhsMj8A2RLCnLcAQggFj15gXUnb75J+Q/KWYzgcGC8+ugD438GwoAVnM8hJoKSiYYM306AAGIS5GHZLSnMeeo3UvoC5WE2IjDMdaCwVBDnvuBrJr0VIICYNGX4/gaZS7cyALPgP2KcxYCZXoEeZwi0kG4T4WH5DRBATMCcwGCtKbrZ00i86+ffvyQZCjIMlCad9cWnOuiIrQbGMwNAADF9//kPGG6MDF76IpWe+mL1IG+ACgNCABQJ/4AmOuqJN7sbihcwM0JiGiCAwFkOJAEMw39+JuJNbEz/Hx6/9aHq3bc/arDMD0r4/6HJCugJMFuAm/WOqYpQn52O2HRQUgIlH2ZgQgEIIBZ4ogQq/gMsdOVEOBfK8DNuffrpX8zlpz+tgcW/5qdvvwVBmYGTjfmtCB/nLXVpngP8XCzL+bnY3vwFlkaMSAUBQIABAHUyq4vKPumrAAAAAElFTkSuQmCC"
$RecycleBinImg = "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAEcElEQVR42mL89f8fAwwwMTAyfP3wjOHT41ucH06fDPh3+V7Y7/uPzRk/fuNiAMr942L5wywpepfbxnyBsIPzMjYBgY+8AmJgnQwM/8FmAAQQ49//fxj+A9mMjMxAof8Mz7auiX2zYmXZv0cvdRh+/2NgZGMFqmeE2AhS+PsvA0gPu5LCLW53uxmSAcGTuHjE/v7//YOBkYWZASCAGP/9gDB+/f7O+mTuzL73KzfkAHVADGJkZMAF/v/8zfDv728GLhebjaoV9bFs7ByfGZgZGQACiAlk6T8mJoYnc2f1vVm4PIeRiZmBkZ0Nbtj/v/8Y/v/+A8F//8INZGRnZWDm5GL4tuug/6MZkyb//f+XjYGRiQEggJgYOdgZXu/bGfVuxbocFk4eoPeYEM7494+BmY+HgVVOCoxZhAVRnQm0k5mbh+Hd6k3xT5cvrmUABhtAADH+/Pye7WZ+3qVf1++ogwyHm/XjJ8Ofb58YZCvKGUSc3YEu/MXw/eXz/3dy8xgZ/vxlYObiRngf6HomYf6PShN7dQECiDnN3jTk44ZtGUysUG/+h8SWcFAAg5CXJ4OAhSXDvy9fGH6+eMHApaLKyCYtycCtofH/2/UbjKAgYATqYWRmYvj3/hPHPz6OzwABxPJp36FYRmBsMrAgIgCk8D/jfwap8Gi4GMw9EgEhDK82bWD49/MnSvAwsrAw/Lx41REggFi+37hpwsTOgRQuEFd+OHGc4d/v3ww/gd789+0bA5uoOOPvTx/+cckrMn05exacOpi5uVENfPpUGSCAmJg+/eBiYMJMFkxsbAxMrKwM7/bvZXy9YT3jt2vX/r/evgWUC/7DgwdFAyPD/0/feAACCJHE8QBGYHIAqWJkYMSvDqgGIICYQNkJn5H/gUkHhIEEhMYF/gHzGTf7T4AAYmLXUDn3HxTAOACboBADKxAz8XIzsgoLM0JSHxaLgRHJKil+ByCAWPisbVa9OnHRhRmSoVEi59+/vwxifoFglzECY5RH34AZLMXMjOnA3z8ZuPX1TgEEEJOQreMKdiX5+/9//UaN6e8/GX69fMHw79cvhv9//oCTCSgB//nw4f+v16/BFsABKKGLCH0RdHGZCRBAjH/+/WZ4tm5F/oueyROYOTgRrgQ6mEVQgIGZgwPVJUALfr97hyL29/NnBqHYsOkKmflZAAHE+B9YFP3985v1TmvTqo9bdgaw8PAiCgagy2A5B9n1YC9D1YByEae9xW7l6roIdl6hdwABxPj33zegHAsw337nfzhtcv/7NRsTmdmArmJhxp+WgJHw7/sPBh4nm90KFVXRbPxCr/8DXQ8QQGADIemSneH3759MjxfMani/eUc6w9tPYuBwArkGuYAFhtc/YEHBLCr0gdlIfblCek4Vn5TKh78/fzB8BVoAEEBwA/8Dswsz0ND3z24xPDt3QOb/9Ycpf67dtfv77qMqw5fvvIzAJPiPm+0Hi7joTQ5N1dPs+prz/wnxXBWX1WXgEpRi+PL1C8MXYBYFCDAAtd/NvIM7GJcAAAAASUVORK5CYII="
$DownImg = "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAACXBIWXMAAAsTAAALEwEAmpwYAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAEMUlEQVR42gBRAK7/Af//+gD7+wAAz+HxAPz8/wDs8voA8fb6FPH2/FnZ5fRA7PL3Jvf6/RMAAAD/DgoF7wgGA9ctGwfFGw4CpAIFCOwmGg4A/P7/ABkVEQD+/v4AAogRZuDFR58Y/v5jYDh05VXm6Tvvij58/a3CCDSFmZmBgZGRkQHE/gvU+O//fwYQEOJiuWWpJtDmYSSx8Nfv/wziIgJgAwECiAUkycTEyMDMxMiy8/yLuiPXXtWCtLCxMDKgA2aQOgaI+Ptvf9V2Xn634Nc/RnlfY4kWJkbGf3+BGgECiAloPwOIsfP8ywn7L72sBUowsDBhGoYOWJgZGUCO3X7xVeO2i2/amZn+M3CyMzEABBDQQCaGA1dehe69+DKbnZUJ6D0GogHIXnZgmGw/97Ls6PXXvj9+/WUACCCmN1/+sK4/8bQKaB9JhiEbyvD/H8O6k0+rrz/5xAwQQCybTz31fvDyqwEb0HUgAPLGb1DsEAAgc1hZIHpA9PO3383ef/njChBALDeefHL/AzQFFNj/gTQ3OyuDnBgXw5+/0OjEahgjyDf/7774zPjn7z9GUCr4+fcv46WHH4IAAojl+fsfKrBIABnBCGRnuKv8V5bgZfyHw0xgbP8/fO3Nv451V5lhYqzMTAz3Xn62AAggJmZGRmEGaFIAJZ93n38yTNt+G5Te/jNDkhMGfvPp5//Zu+4wAX0Bdh0sSb399FMcIICYmJhQbQeF5aWHHxknbL75/x8WB376/udfy6or/5+9/8bEyowai0DD/wEEEBPQ5Ff/Gf6jBDY7MJC3nnnGtPb4YxQjgRb8n7Hjzv+LDz4wc7AyoxgGykUifOzPAQKISUaY696fv//RbAIaCnTpwn33GC/c/wCX3H722f9dF54zcbGzYLj8DzBhSApynAQIICYDJcFNbCzMf/9jyWa/gKp6N15nePv55//rTz7+m7X7DiPQm4zo6RUUdxwsTH+MFIWWAQQQi4okzy55Ua4zd158NmdnQQ1QNiD/xYcfjA0rrjB8/fGHAZgTGEGxiQ5+Ai3WleM/6awvegQggJhEeVj+eRlJtABT1j9syQRkyc2nnxievfuO1TBQ2AFd/SfIUqZRkIf1P0AAMXECE7KzvsSWYAuZjl9/QMUTZsyCXMrCjJkvQQ4AGeiqJ1Fnpia2+x8wCwIEEAs3x19weZfmrlADDDPGTaeflAPTEhPIAFxZG+SRP8Cy7/9/xr/OehKNKW4q7aCy8D/zfwaAAGIBmQpKNaDU76gnUgUUPnX+3oeq1x9/mIJKYlDkwCIBbBAwn7MAvS4lyH3C31yyVUeObwvQkyDPg1QwAAQQMC9+hSSV/4wMfxjYGP4Cde8484z9xqNPXvdefUl+9/mX5s9f/4RBzgUW/68lBTmPq0vzrpES5NphoyXwS4yfjQHsKCgACDAAv0i7HhKhhxMAAAAASUVORK5CYII="
$AddImg = "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAABfElEQVQoU2NkgIKuI/621z4eL/j5/7vl////GDmZBc4r8Gn319vs2g1SwggiyvZblF//cKKViYmBmeE/VCcjA8O//wz/lXkN2iY4X6hhbDzm6Hzm5f5dzEwMTP/+MzBoC1szsDNzMZx9uZuBmYmB4e8/BgZjYdtAxqQdMtve/nji+Y+BgeHXHwaGSrOFDCKc8gwFBxwYOFkZGJgZGRgE2aSPMIZsZPn4+/8fPkspPwZziRAGTSEbBnYWLobzL3cxnHu54d+hZ+uY2JnZ3jEGbWL88ufff25PhcT/jjLJ/yR51JlYmNgYHn26/O/wk8X/tzyYycLOxPyRMWG79NEPv55a/f3P8P/HHwaGarDVcgz5BxwZuCBWM/KxSpxnrD5oHX7p/dEVILeAHO4mH8fAwyr4f+2diYwsUM+oCemmg4Mnc5f67Mdfb6bAJEBiMB9LcSsvd/7QHgtWCArPyv2WSY++3sz5/ve9Kih0OZmEHkhzy8/odKiYzsgY9hcA1raLhwZi6ZoAAAAASUVORK5CYII="
$DeleteImg = "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAABPklEQVQoU2NkgIJ7DQ16Xy6cy/7//bctAzMDEyMT8zEuJaWpKpMmnQUpYQQRN1NTY79evz7zPxMjJyMjWIiB4f9/EP7FralVrD5r1hTG+1VVBu8PHz7BwMTIDjMdmf7/588fQQdHZ8bLgYELf719E8fw9y/D/79/UdQyMjExMLKwMLAJCm5ivODu/vjv928yor6+/wRd3ZiQVX46fvzvi6VLmJm5eZ4wnndzffbv+3dJseCQv8J+figmfjxw4N+zeXNZmbm5nzNe9Pfb+Pf9Bz+G///+///3D64Q7CUmRgYGJmZGViHB/Yx3q8qcPxw4vIeRlRWbXxj+//nDwGNsEgTWeCUhoenX7Vs1DCws0LCBhtDfvwxsYuK9uuvWlcAlricn+/569rT4369f2qDwZWRnu8khLTVRY/a8VSBtAAMSd/o2C3hDAAAAAElFTkSuQmCC"
$NewImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAORQTFRFmqi8prC8qLXHxMzY9PX2/Pz8AAAAmai8/////v///v7//f7//f3//P3+xM3Zt8LUztTb8vP0/Pz8mae79ff8w8zZ2+HsscDTprK+8fP09/j4mKe72eDqx9fvj6XBvsXLl6a7tL7LqLO+gJCfwsnP9/f3lqW69vj8p7K+z9TZ8/PzlaS5prG+lKO5+fv99/n99Pf88/b78vX7pbG+k6K3pbC9kqK2pLC9kaC2o6+8j5+2oa68jZ20oK28jJ208fT7jJyzo665o625oq24oa24oay4oKy4jpyp1trd+Pj48PDw8fHx73OFhgAAAEx0Uk5TgP///99AAID////////////fIID//////99QgP////+A////v7+A////v4D/gP///////4D/gP+A/4D/gP+A/2D//////////7///0fxPR4AAACaSURBVHicTcrVFoJAFEDRGWPswmtgoRhjC3YXgvX//+NcheWcx70OIfSXzx8IMhEJ0XAkGosnkql0RkHIUviWyxeKaklA2YNKtaapCiN1F6Ch681Wm5GOC5xz6Pb6jAy8QzREGNExTDgYYE5hhjCXjgXCUoIVwlqCDcJWgh3CXoIDwpEa5kmGM6WXq2XdbNtx7g8B7Pn69wb2AQWAGzkoannhAAAAAElFTkSuQmCC"
$OpenImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAWVQTFRFAAAAdomxfJK9dYy6bYa2ZoGyYXyut8TfsL/crrzaXnqseY2zm6e39/j6NUljpZyEppyF2tKg9/Cr+e6m++ufnZWC/eiZuMnAS4I7N0pk/uiY+td8oqy6zdzNSn86bqhbvM3DO05ompJ/8+aas6iHtquNwbijtsOsRYA1gLxrm9iEY5xOsr+pr6id8uGS38R8rKOJ/OCL/Oeqb6pYRX80NmskOnAo3MGIYGRplIt68dyJxLeK/dZ7/duD+O/bLmMb9ufL58eHhHpsPFBpkod379eB/9x+/9Rr++Cf+OzR8dWgmohUaVUrjoV17NJ5y7+H/9hx+uCoM2ogiap53bBqa105PDwe0r19/89g/81e+dB2X5RMnLeK5cCFmIRPPDcphXtt0bBozY8AzpIIzpwo0KtV0bV4vqVtqY1LZlYxQjkqjX5lh3lge25Xb2JOYldFWE9BU0tBTkhBRD44MS0pIR0ZGBURfa5xTwAAAHd0Uk5TAP//////////////////Vf/////////////////////////////////////////////////////M////////////7mb//////////5n///////////8i//////////+7/////////////1X//////////////4inCwfAAAAA2klEQVR4nGNgAANGJmYWVjYQYIAKsLOzcXBycXLCBLhB0lxcXHAVPLxQwMfALwACSAICgkJCwiJIAqLCQL4YUEBcAiQgySAqIiwiJS3DKysnL6fAy6vIoKQsIqWiqqauoamlLaejq8SgpCelb2BopKFhrGViamZuwWBpZWhgbWNrZGeiZe/g6OTM4OKqL+DmbuPhaWJs7+Xtw8Dg6yfgH+BuE2hiHBQcEhoGFAgXcIuIjIrWsI+JjYsHOjpBIDEpKTklNS0tPSMzCySQnZObl19QWFRcUloG5AMANQIlW9BBx+EAAAAASUVORK5CYII="
$SaveImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAnlQTFRFt7b1tLP0sK/yq6rwpqXtoaDpm5rnlJPkkI/hionehIPbfn3YeXjVdHPTcG/RtLPzu7r7pKP5ysn67+/87u787e377Oz66+v66ur56en55OX2o6jfV16/Xl22XVy2r67xu7r8nJv2zc35////+/z98/X6o6zdQk2nQ0OGV1asqqnuurn8l5bxysn26O31mabYQ1OyWlmqVFOno6Lrubj7kZDrxsby3uXwjp/TRVi+UlGinZzouLf7i4rlwsLu/v///Pz909zrhJjOO1K4aWjJT06dl5bkt7b6hoXgv7/r8/b6ydTmepHJMUyxYGDBTEyZkpHitrX6hoXeubno9fX78vP66ez23+Ty1NztytTnv8vjtsTfbofELEetWFm5SkqUi4rfs7L5tbT9iYvhZmvKXWbGU2HBSVu8P1e3NVGyKkytIUeoNk6wVlm+UlSyR0ePhYTcrKv4srH/oqH4j4/vgoPpenzidHfdbXHXZmvRX2XLVVzBUVe7U1W5TE+sRUWKpKP4p6b9np35gITOX2qZXWiXXGaVWmWUXGaUX2mWW2CsTE+yRkmlQkKFnJv3nJv6kZDzcHa4PktdJi45Q09fj5yvmqa4dIGTVV6dSU6xRUqrP0SfPz+Ac3LTlpX3kpH1iIfta3K1O0dXISYsU19uytTi2ODujpmpUl2bPkaoPkSkOj+ZPT17b27Qj47zi4rvcnfdU2CjRlRnYGp3hJKjytLe1tzliZKeSlWSN0ChOD+eNTuUOzp2bGvPg4LlfXzgTly/LECFTVh3mqK8oKa9pqq/q67BZmp9PUN+Nj2WNjuUNDmLOThxamfLZWTEW1qyPj59PDt4NzZuFadI7gAAANN0Uk5T////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////3/n//////////////////1Tf/////5DV0x0AAAEPSURBVHicY2BgYGRiZmFlY+fg5OLm4eVj4BcQFBIWERUTl5CUkpaRlWOQV1BUUgYDFVU1dQ1NBi1tHV0oX0/fwNCIwdjE1AzKN7ew5LNisLaxtVNWtncA8h2dnF1cGdzcPTyBfC8g39vH18+fISAwKDgkNCw8IjIqOiY2Lp4hITEpOSU1LT0jMys7Jzcvn6GgsKi4pLSsvKKyqrqmtq6egbuhsam5pbWtvaOzq7a7p5eBp69/wsRJk6dMnTZ9xsxZs+cwzJ03f8HCRYuXLF22fMXKVavXMKxdt37Dxk2bt2zdtn3Hzl279zDs3bf/wMFDh48cPXb8xMlTp88wnD133sjK1T8+v773wsU9Zy4BAOR3YFLf8cIFAAAAAElFTkSuQmCC"
$SaveAsImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAbxQTFRFAAAAiYjPh4bOhYTNg4LMf37KfHvJeXjHdnTGcnHDb23CbGvAaWi/Z2a+ZWS9hobOqqn/ionv////9vj7S1i+WViwhITNgYDmtLa4t7i6u72/vb/AvL2/uLq86u72QVO5MzNnVlWqgYDLd3bc+vv98PP54ujyPFS2e3rfU1KkfX3Jbm3TfYCEpqiqUVRXmJ2j4d/Y4+jySGK5eHfZUVCg/v79x7eIs5xN3dvWconIfn7UVFSedXTFZ2bMVkY3qZNR4s507uCMtaBXsrjGm5vZZWWkcXDDqKf+mpn3Y2bLYWjIfIXQpqrGsppJ179ilIFAwr7Mjo66bWzBpKP8kpH0lZTurKvvwr/Uv7rBaWm/oJ/7lJP1TFxyUWB1YnCDi5Wjt7i2qpt0Zma9oJ//kZD1h4bsS1txAgICOkJN1N7s5Onzubew2cRsrLjKrWxewHplY2O8mpn/NDxHaXmO2eHu5Orzp6+5rKq3hoZ90YVz349wYWG7j47zJESqITJHq7TDs7vGvcHKxsrQY2dvfYTBrau8kDU10HZeXl65ZWTDUE+fTU2aSkqUR0ePRESJQUGDXV2Vg4KprqqztXVgP427BAAAAJR0Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////0L/////////////////Sf///////////////////////////////1T/////////////MCm7l4gAAADhSURBVHicY2BAB4xMzCysbOwcnFzcPLx8QAF+AUEhCBAWERUFCogJiAtJSEpJy8jKySsoAgWUBJTB8iqqauoamkABLQFtIR1dPX19A0MjYxOgADtQQEhI39TM3MLSyhooYCNgC1RvZ+/g6OTs4goUcHP38PTy9rHz9XP0DwgECgQJBAeHhIaFg0UigAKRAlHRMbFx8QlgkUQGhqTklNS09IzMrGw735zcvHyGgsJU8bSi4pLSsnK7isqqPIbqGvHauvqGxqbmlta2vPY2ho5ORc2u7p7evv4JEye1tU3G8D0ASIs1Gvrfj1gAAAAASUVORK5CYII="
$ExitImg = "iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAMAAAAMCGV4AAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAANtQTFRFAAAAfVBJfE9Ie05Hek1GeExFd0pDdklCdEdAckY/cUQ9b0I7bUE6bD84sYqF+8/I+snBpoB7aTw198e/86md8qWZZzs08LWr6paIZjoz66qe4oZ2////ZTky5p6S23ZlZDgxeU1G4ZWI1GlWYzcw13lpxkEqYjYveEtE03prwUItYTUudkpD04F0wE064KieYDQtdUlC1Yh6w1ZD57u0XzMsdEhB2I+ByGFMXjIrc0dA4aOW0XJez2xXXTEqckU+pHpy5auc4qCPmW9ob0M8aj43aDw1ZzozYTQttIXK3wAAAEl0Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////6CYd5EAAACmSURBVHicRckJE4EAEAXgV27KVURFKFIIJUnkPv7/L7Kaafpmdt/bWYBhc/lCsVSuVGscDzD1RjPVaLXBCGInJQpdsFIvI/WRkxVVVRUl2fIA+aGmUU1GG44wnui6rv5RTgwUpjNC5z+mJuaWbdvJn9JaYLlyHDrWNI6z2mDrelR33o625/rYB4dMEOIYnc6pUxTjcr3dU7dHDDw5/vX+DAzz64cxftVQHsrek7+vAAAAAElFTkSuQmCC"
$NewJSONImg =  "iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAMAAAAMCGV4AAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAM9QTFRFAAAAh5etgJGmeIifeYieIyMjgJCm4ur4eYidm6m7ysrKO05nPE9ozMzLSVtyz8/PdoWblaO2////rLW/rWxekqC0l6W9lqO9nKnAqbK8kJ6zn6zDo7DEpLHEmaKug5CkkZyodoObsLnNq7bKrbjLX219f5CmQVNqeomhtb7QMURec4Sb/v7/LD5ZYXOL//7/w8vZuMLRKj1YUGJ7t8HUqrTJqLTJqbXJoa3Dm6rAlKG5iZq0hJWwl6W+QVRtO05oOEtlNUhiLkJcLD9bKz5YGXXZNgAAAEV0Uk5TAP////8D//////////////////8D////////////////////////////////////////////////////////////////Yrl7SAAAAJBJREFUeJxNyecSgkAMRtEoCIr9w7L23uuuvdf3fyazMA7cTH6chChCUTLIJCNmEmfZlm16E7f1IeEknVQ6k9WbY+cR5BaIiijpykIIuKQdVGFXUePqXANNdiv0b7M76Pb6fhiwh6H/iD3G5B+m7Bkw9wMW7OVq7SWlhGJvtrv94Xg6X643pU33x/P1/nyVrx/JuBRkqmtXBQAAAABJRU5ErkJggg=="
$OpenJSONImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAYxQTFRFAAAAICUgJycnHx8fioyP////bW1tgICAgYGBfHx8zc7PpbLDpLHCoq/Aoa3An63AoK3AorDBqLbFt6uvrWxetXVg//7//v7//fz//Pz//Pv+6OTb349w0HZeoq/BrrzTr73Tsb/Vt8TYvMDDu7B9rLjK0YVzkDU1//7+/P3++vz++fv9+vv95+Tbuaxz7uCM2cRshoZ9gDErt6Zl179isppJFhIOYFUgpbHCtaBXfYWEsrzMw83evcncvsHFtJ1Ow8G4bH6PzdPdd5DE5Ojz/Pz9pamuybmM4s504uLczdPcX3OFf5TAy9Tw6u3xYX++W3ix1dzrur7C/v79qpVUsrjAtMDXwsvZWm6Bb4rEZIG+V3i8hKr4lLX7UG6mub3Fe36ADg4O4N3b8vb76PD6usbWWW2ATm6nc5nngaXxU4HbMWG7O1iR3+Pp2Nzhy9LbwsvYuMXWt8TWP2KvPFuTOVmYMl+3M2XEOleRrbnNiZelaHuMXXGDYIC1XoDVNlSNOlaQb43BNVCGco2/8Nv4cgAAAIR0Uk5TAP9IQf//4P//////////////////MP////////////////////////////////////9O/////zD///////////////////////////9T//////////////////////////////////v//////////////0n2//////////8YWv//Tv9XjuAtTAAAANtJREFUeJxjYGBgYGRiZAZjZkYGEGBhZWNlB0IOVk4usAA3Dy8fPz+/gKCQsIiIKFCAR0xMXEJSQlJKWkRGVgQoICcmLy+voKikrKKqJqIOEtDQ1NLW1tHV0zcwVDcCq1AAyRvrm5iamYMMtdDQ0tLRtQTxrcC2WIvb2NrZg/gOjmABJ2cXVzd3D1MzTy9vINfH188/IDAoOMQsNCw8AigQGRUdExsXn5CYlJySmgYUSM/IzMzKzsnNyy8oLAIJFJeUlpVXVFZV10SkpYEEGGrr6hsaGVBAUzMSBwBpFCn/vE7gTQAAAABJRU5ErkJggg=="
$EditJSONImg = "iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAMAAAAMCGV4AAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAUdQTFRFAAAAh5etgJGmeIifeYieIyMjgJCm4ur4eYidm6m7ysrKO05nPE9ozMzLSVtyz8/PdoWblaO2////tcDP5OfukJurrWxekqC0l6W9lqO9nKnA2L63pWFTkDU1//bm7Zl7y2tThiwskJ6zn6zDo7DEtr/Q29fPwZ1EpLHEzHtog5Ck9+eH571WXEEqrLW/doObsLnNq7bKrbjLvcXV3tnR9uWG5rlRpqirbXyMf5CmkpKS0NbhQ1Vteomhtb7QvsbW1tXQp6WjqbPBu8XUMURec4Sb/v7/jpSa/v797cJbp6Sj8PT8hJOmsLnLLD5ZYXOL//7/t8DRw8vZAAAARklMk5KUuMLR5ez5YnKKn6vBKj1YUGJ7t8HUqrTJqLTJqbXJoa3Dm6rAlKG5iZq0hJWwl6W+QVRtO05oOEtlNUhiLkJcLD9bKz5YHhkpUwAAAG10Uk5TAP////8D/////////////////////wP///////8G/////////////////////////////////////////////////////////////////////////////////////////////////////////1JsVMQAAADBSURBVHicY2BgZGBiYGZgYWBmZWEAAjZ2NnYWMORgBwlwcnFz8fDy8YOwAJAvKAQDwiKiYgwM4kISICApJSQtIyML4kOBnIy8giIDg5KQMhCoqKqpa2gCuQxaUFl1bR1dPSBfX8jA0MjYRN3UTNfcAsi3hMgCuVbWNkC+rZCdvYO6tpmuo5OzC5DvKiTk5u7hqevl7ePrB+T7BwQGBYfohoaFR0RGAfnRMbFx8QmJSckpqVEgPkNaekZmVnZOFIQHAFbcH1FIRF+DAAAAAElFTkSuQmCC"
$LoadKeyImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAUdQTFRFAAAA//jv182539Wz3tO039O33dOz3M+s28ye5t27//zx5NWu792V9OGl3sqc59eX8dqR6tJ218iZ///u5tSq7tZ/5dCMqIpYy69u69h768tp2sSP///p49Sa7NJu7tN02r5u5Mdu79Jq7cdU28WK//7s5M6P7cta78xS7s5M7s5N781N6MVN2MWK//3u482M89Nd89Rg9dNf8tVX9dNW7sVU2cKQ//Xy5NOq1bxk9NRb+Nxp89pg2r1FzrV249S//vjm8OPG5cly3LZD4sJW2sKX8ebP8+3d///z38uZz6c33blb3Mei4cqXzKcx6cJLzbB+3siV0KQ20rVk2s20///03saQ0qM1y7Fr8OfS///z3MSHz6IxzLBl2M66///028WOz6M+07yO8evh///02MGO061L0rV24NDA0r2cvqdx1sSj7+bh6zNnVwAAAG10Uk5TAAnj////////oyX//////////xL//////////1X//////////0v//////////0H//////////wnt////////whh+/////ysHBv///+X/////////8QP///+RD////8QI////Tgf///+rjv/7Y9qh+7EAAACaSURBVHicY2BgYGBkYmZhZWPn4GSAAi5uHl4+fgFBIZiAsIiomLiEpJQ0TEBGVk5eQVFJWQUmoKqmrqGppa2jCxPQ0zcwNDI2MTWDCZhbWFpZ29ja2cMEGBwcnZxdXN3c4QIMHp5e3j4MyMDXzz8ARSAwKDgEmR8aFh4RiSwQFR0TG4csEJ+QmJSMLJCSmpaegWJoZlZ2DoQFAGJIFv8atu2bAAAAAElFTkSuQmCC"
$ScheduleImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAVBQTFRFAAAAi5quzdTeES9ai6rqiKfpg6ToeJzkcpfia5LgZYzeXYfbV4HZUHzXSnfVRHPTP2/ROmzQmr3/lrv/krf/jLT/hbD/f6v/eaf/cqL/Zpn/LFa/d5zobJTlZpDlYo7kXYvjUYHiTX7hQnjgKU2znrHL////8vX87PH6pcD36e75pb3t4Oj32eP2JThOuMrv/Ofo+eTpv8/vtsz3wtDvSFhn/yQk/ykp/zMz/1hS0N79tsfrcnG0OzmOJCJ5NjSIa2upsr3ZfYiN79/n9/j9/5mZ19PlV1agxcXc9vb6QD+QoKWw+MbCeXe1EhBBZWWmZmaZ/IqG/MC3p67VNDKB7+XrJiR70d30cZPVx9PowcLbmZnMKSd6eJrdeJbUjqbXvMnjjY271d/1xtTyUVWdWViPDiM+FyxFNEZZZ3R9p62zVVSVQ0GGeHekLiyAMS9+7zgnagAAAHB0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////ih0tAAAADrSURBVHicVYrrP8JgGEAfmS13Re7K7X2evJaFmdis0YsVVoSi5Ja58/9/s33COd/O7wB0RP4K0PnfCEhdsqxEu3t6+/oHBodiMZDi8eGRxOjY+MRkyBRI4TIdnUkmU7Nz8wuLwBBlRIXSS5wvq5mVMGjZ1TWidSI9rW4AkzVjM7e1bVo7dt7Z3QuOgiHE/sGh5RZdp3QUhKwh8PjEQvSIlyvAFM3InZ6V3CDwTPU8OIRZuFAviyg8r2bawATVOb/KXyOpNb3RBHbTqrdu7+4d4g+PWvsJwPf955fXt/dyVW+0P+CXzy/7uwLwA3KFKyXgfB7XAAAAAElFTkSuQmCC"
$ReEncryptImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAaFQTFRFAAAA//jv182539Wz3tO039O33dOz3M+s28ye5t27//zx5NWu792V9OGl3sqc59eX8dqR6tJ218iZ///u5tSq7tZ/5dCMqIpYy69u69h768tp2sSP///p49Sa7NJu7tN02r5u5Mdu79Jq7cdU28WK//7s5M6P7cta78xS7s5M7s5N781N6MVN2MWK//3u482M89Nd89Rg9dNf8tVX9dNW7sVU2cKQ//Xy5NOq1bxk9NRb+Nxp89pg2r1FzrV249S//vjm8OPG5cly3LZD4sJWwF5EuEQlqE4np2M6vVM1mD0R///z38uZz6c3p2E9pzgQqTENpjQQuDESvS8QrCgL4cqXzKcxqDsSt0MqqEMksCwLsyAL3siV0KQ2qz4Y2s20ijUJoCgJxhsL1xMM///03saQ0qM1y7Fr8OfS3MSHz6IxK5UwI40qFIMaDHYRZ6lnSJdJ28WOz6M+HJInDZYOGIgdZq5maKxoaa5pDHwS2MGO061LAnoNAGEFBXUOH4UlMYo0DHYVDm0Z0r2cvqdxAGIFJW8tAFcNAE8LIGoqaqxqQ/WvggAAAIt0Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////0KSFBMAAAC7SURBVHicY2BgYGBkYmZhZWPn4GSAAi5uHl4+fgFBIZiAsIiomLiEpJQ0TEBGVk5eQVFJWQUmoKqmrqGppa2jCxPQ0zcwNDI2MTWDCZhbWFpZ29ja2cMEGBwcnZxdXN3cPTy9oCLePr5+/gGBQcEhMDWhYeERDAyRUdEwgZjYuHiGhMSkZCg/JTUtPYMBCXhnZmXn5OYx5BfAVBQWFZeUlpVXVMIEqqprauvqGxqbYHqaW1or2to7OrsYAOcLJwOH8c2bAAAAAElFTkSuQmCC"
$EditStyleImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAfhQTFRFpbLDu8XSu8TSucPRuMLQtsDPtcDPtL7Osr3Nn6y+zNLX+vr6AAAA/f7+jJ22jJ+18/b6197t/P7+rLnN2uX1iJy1wczjeZDD7vL39Pj+zNvx+/z9l6nQYHu22d/t+/39kaC1laKyhJWoan6UfYybxM/kmqzQY3y0pLLS9vn719/uws7kwc3j3uXw9fj7jZup+vz9kaTLucXem6vNY3uvq7vciZ/NpbbXe5HBeY699Pf73uTve5C+manMlqXHPVmW1Nvo+fv8mazU2uLv1Nzql6fKQ1+bjJupucLRwcvgkaPJrbrWo7HOVW6imqnI3OPvmqvPvMjel6fJQl2X8vb6jJqpt8LQ+fr8mKjL2uDslqbGZHuq4ufwYny0pbTT3OLtkaLDPFiU5evzi5qptsHPpLLQUGqjdYq00trn0djmYXmoP1uWaH6sSmWhW3OnnazKVm+jvcjdi5mo+Pr89/r88fX68PX67/P57fH5ipmotb/OwtTo5u717NXV69TV4uvW29fo2tfozObuy+Xu8Obg8cmu6/D4s77NUIS+wNPn04mH0oiHus+Muc6MqJjCp5fCgMXXf8TX9nYY6u/4iZiosbzNiKvT0uDu3q6u3a2uzdyxzNuwwLfVv7bVpdTjo9Pi7tXH8p5j6O33iJiojZywjpypjZypaXuNdwZ47wAAAKh0Uk5T/////////////8YcAP//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////H3UBZwAAAQJJREFUeJxjYGBkZGRiZmFlY+fg5OLm4WFg5IUDPn4uqICAoBBIQFhElIsbLCAmLgEkhTgkpfi5QALSMrJyQL68gqKSsgpIQFVNXYNXSFNLW0dXT5+BidfA0MjYREje1MzcwtJKn4GZ19rG1s7ewdHJ2cXVTcCdwYPX08vbx9fP0T8gMCg4JJQhLDwiUsggKjomNi4+ITEpmSElNS09IzMrOyc3LyG/oLCIgY1X3sCxuERTz0qgtKy8opKhSqi6prauvr6hsam5pbWtkqFdvqOzq7unt69/wsTWSZOnMEx1nDZ9xsxZs+fMnTd/wcJFixmWLF26bJm+vntoclFl5ZTFywF2GkLchX/HXgAAAABJRU5ErkJggg=="
$ConfigCIPropertiesImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAZJQTFRF58t09uGR//Cf2q4l/+6Wxrx/7deVh5etAAAAgJGmeIifeYie/e2r4Lgy//GM48JY//GQ37Yvw7h84ur4gJCm//OW//vH8+Wt//vD5tuQysrKO05nPE9ozMzLSVtyz8/PQ1Vt2qsj4b9T9Oiv/f/w9uu05bs2////tcDP5Ofu//GT//i///CenarBl6W9lqO9nKnAo7DE0Nbh/e6t37cx/el95sZd//CT+eif+fPy6XhU5r6y+fn66dCB7dmM/+yQ5b857NeU6Gc8+Vsm6EsYvKOhprLFiZmw6EMN1XVZ+vj4/v7+hZWqsLnNq7bKrbjLj4GNtr3Lt8DRf5CmtsfZh6PAV32meomhtb7QvsbWaYmtu8XUMURec4Sbc79sSrYuKJQVcr5qsLnLLD5ZYXOL//7/VaVYJoURGXgHn6vBKj1YVWeA+/z+9/n+9vj99ff99Pf98vX87O/7l6S9UGJ7t8HUqrTJqLTJqbXJoa3Dm6rAlKG5iZq0hJWwl6W+QVRtO05oOEtlNUhiLkJcLD9bKz5YfZSFqAAAAIZ0Uk5T//////////8A//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+7oWW2AAAA6ElEQVR4nGNgYGRiZmFlY+fg5ODi4ObgYODh5eMXEBQSFhHmBkEOBiZRMXEJUUkpaSkZWTl5BQ4GRSVlFVUlNXUQ0NAECjBpaSuLaeno6ukbGBoaAQWMTUzNzAUtLK2sbYBqgAK2dvYOOhaOTs4urm5gFRwc7iDt1h6eXt7qEAEfdV8/f/+AQP8gDYhAMFBBSGhYaKg6VEW4ekRkVERERFSQRnQMSCBWXT0uPkE9EYiTkkECKalBaekZYJyZBRLIzsnNyy8oLAIaVQwWKCktK6+orKquqa3L4gAJcNQ3NDY1t7RmZQH5HACaRjQiY6/eEAAAAABJRU5ErkJggg=="
$PSModulesImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAATtQTFRFAAAA8fX5nrvYkLHToLzZqcPdrcXeq8TeqMLcpL/bob3Zo77a7fL4p8HcTYK4WIq8dZ7IlLTUr8ffydnp3efy4uv0u8/kSX+2UoW6cJvG6/H38vb6pcDbToK4Y5LBSX+3+fv9S4G3V4m89/r8k7PUQnq0hqrPRn21lbXV////c53IRXy1tcvi9fj7XIy+SH+2TIG4RX21zdzr4erzUYW6SH62ytrq+vz9Xo6/SoC3nqh/jbGpXI2+5Oz16fD2YZDAR362dp6ZNYcfJHIMUY0xX4+/+Pr81eLuU4a7RHy1T3ecT4aBm+KJnbrYkbLT1uLvoL6xZLRPQ3u0TIG3T4O5WIyUxNboUIS5Y7NOVZUy8PX5gafNSYOfL4AZV6dCQpEsK3oTNWEa0t/tg6+fLX0WJXMNJ3YPKnoTMWkUsDRxFAAAAGl0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////8v//////////////////////////8k/////////x3///////8/d7AEEwAAAM1JREFUeJxjYGBkYmZhZWPn4OTi5mEAAV4+Pn4BQSFhEVExNrAAMx+fOB8fn4SklLQMVEBWTh4owieoABVQVFJWUQUKqMEE+NQ1NLW0kQX4VHV09fSRBQwMjYxNFJEETA3MzC0s1aysoQKmNrZ29g58jk7OLmABS1c3dw9PL28nHx+wCLOija+2n3+Ak09gYCBIxI9PMSg4JNTJCSji7OzMwBAWDnKmoiWfk0+EcyRQi2aUEW+0XAhfTGxcfEIiAwRoRiUlp6SmpWcwMAAAqjIiV9kVLmEAAAAASUVORK5CYII="
$NewPAFImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAmdQTFRFAAAAyc3Tk5yrbXuNcX2WcYGYanqRZHWOXnGIaXiUXm2Eh5Oo5uvurLG+5ejx+/n/+fn89vn/9vf97fb98PP8tLvMgImaoK7BlqXDXG6IpK2x+fz7+/v9+fv/+Pn/9vT+9PP98PP55uzza3WHo6zCyNbzucryVmuCjZSgorjqobrrqLnnscfuv8/y6PH40tTiRlBcT19uWGmFV2mBpq2+fISY9/j++fj+8vb89vb/6/P76/H46/D9ztXmPkhUcoGP9vv+obfooLjrqMDquMntydTx6vH+5OjzbneI////j5er4+Pt8vP57vL47vH/7/L67/X99PX99fj809ng3uHnipiq7PD7obvrs8bvyNLn5ufqnqayhI2ea3aKf4mbUWB27O7wsrvInau76u787vP7pKq4oqm0sLbBrr2s+Pn72N3jrLPApqu56+3vrLPDztTg8fX8uL3H+/39ZotYj6eG8fT58/f/o6q8trvHl6a08vf8iJGi2d3k+fr/Y6JPeJtpeZNt1N7ix8/gfoibjJmr8/b8bniM8vT78vf/ZKJPk8B/eJxnYHpT1uDvVmJ7s77IeoSUYHONXnGKXW6EeYaavsXNiJGhz9bi7PL/SX02T2tDMUQuwMvYusXen6q/Z3iT4Oj04Or55ef54Of45+v87/P9srjCn6i71NzsAAAAWGRk2+b72eb/i5mzo6q6YXaQvM3tv8zwvM3wvM/uxNDz0t32oKe3maKylaG3hJGc1uP6tsLdiJaxjZaq1tfcjY6TQVBjVmd8T2R6UWF6YHCGh5GisLfBqbC/doCVTlt0cXuRnqa2wMbPWvyMgwAAAM10Uk5TAP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////gH00AAAECSURBVHicY2BgYGBkYmZhZWFj5+Dk4gZyGXh4+fgFBIWERUTFxCUkgQJS0jKycvIKikrKKqpq6kABDVlNLW0dXT19A0MjYxOggKmZuYWllbWNrR0DBNg7ODo5u7i6uXt4AgFQwMvbx9fPPyAwKDgEIhAcGhYeERkVHRMbF58AEmBITEpOSU1Lz8jMys7JBZuSl19QmF5UXFJaVl4BMbeyqrqmtq6+obGpGSLQ0trW3tHZ1d3T28fQP2HipMlTpk6bPmPmrNlz5s5jmL9g4aLFS5YuW75i5arVa9auY1i/YeOmzVu2btu+Y+eu3Xv2MjLs23/g4KHDR44eO37i5KnTZzwBa/hU0z2kfqoAAAAASUVORK5CYII="
$ExtensionsImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAN5QTFRFAAAAaZ6nZZulYZiiW5SfV5KcUo6ZTYuWSIiURIWRQYKOPYGMmM3WksjRisHKgLnDdbC6a6exYZ+qWJejU5OeJHB9UpCbTo6YSIqUQoWQO4GMNX2IL3mEKnWAJXF9Im97sL7R/f7+/P3++/3++vz+8PX+TGF4rbzPo7LFoK7CxNPrPFNqq7nMzNnrMEhgp7TInazAmqm+y9brorHE9fn98vf+7/X9x9TrssDSsL7QmKe8lqW5mqm9zNfryNTrw9Lrr73PrLrM9/r+lqW6anyR+/z+qbfKprTH1dzrz9nsJolvigAAAEp0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////94qDulAAAAoklEQVR4nG3L1xKCMBCF4Sj23ntLiKKUgGIXW6y8/wsJu+OMF/53e2Y/QsIiUSUWTyRT6UwWbhLN5QvFUrlSrdVxUBrNVrvT7fUHQxxGNIypfDxBrgFn05luIDeBBx+WQG4DZ858IZC7wJer9UYQjW53zAm4ZbD9QRfEpCrnHvDj6RwMNr1c5e0uvhGXPqSUyCGHPl+cc+CQR9++7yOHfvnfPlXoHKyOCRKXAAAAAElFTkSuQmCC"
$AboutImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAapQTFRFAAAAsbCxkJCQenl6sbGxiYmLoKGlt7m+yMnQpKSkl5ebu77HmqvWZILYQmrUQmnQWXjKiZzLtLjEvMLSb4zZPWnZfJnkssPwtcTvk6jhQ2fBW3i+qbHHvb/Hc47XN2PUSnDW6+/6/fz5///+////wsvlK1GtWnS1s7fCoa/UO2bROmPLQ2nMbYjORme4X33H8vP4+fj5Q2GuIUeggpO6aoXKOmLJOWDENl2+KlK1FkKsL1Kr3tzf1tnhJEeaFz2YTminQ2a8Nl7ANFu7KE+xF0GmIkmknqa82tbRZHuwFTyVIkWZMFCdQWKzMFe3IEmsEjyhBzKbjpvA3tjSa32sI0WbLU+iL1CiPFqlYnq2HUWmETueDziZFTyZl6PDp67EKEqeNlapPFquO1qwYXe1lKC9DjeXDzeWEDiTGj+WU2qmXHOtNlWsQF22QF26P1u7jZnBu73ETGSdDTSQEDWQP12hw8bNyc3XVm68N1S+PVrEY3bCt7nFuLzHS2KaFjqPPVuku8DR0NPfS2O+Mk7GYXTHsLbMk565X3OqSGClTGKtYXO/kZzLuLvG8miOSgAAAI50Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9Ewx1YAAADbSURBVHicY2AAAUYmZmYmRgYYYGFlY+fgYGdjZYHwObm4eXj5+AUEhbg4wfJcwiKiYuISklLSMlwgNayycvIKikrKKqpq6hqsQPPYNLW0dXT19A0MjYxN2BgZmNhNzcwtLK2sbWzt7B3YmRiYORydnF1c3dw9PL28fTiYgQK+fv4BgUHBIaFh4RFAASb2yKjomNi4+ITEpOQUoBZGttS09IzMrOyc3Lz8AqChDKyFRcUlpWXlFZVV1TWsYIfV1tU3NDY1t7S2gR0GdHphe0dnV3dPL8TpmJ5D9T4AigIo6pmdx+MAAAAASUVORK5CYII="
$HelpImg = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAUFQTFRFAAAAZ4CSSnuXgI2YjZ+uSXiVt77Cnp6ek5OTmpqaj4+PqqqqjaCuT3uWxcnM9/f39fX13d3dsbe6aoqgU4OnSnybjKCuUXuUxMfI+vr6u8PJaIynZZTFbJvZa5vaYY6tTHiTtru+z9HSiJyoTXuaeKPcb53Za5rZapraUYGkbpeva5SuO3CPbJrZbpzbapjaa5raapnZR3mdbZavbJvaO192aprZa5nZQHWXaJCqbZvaapnaapfaaZfaN2yPYY2pa5nabZvbNWiJWoijcZ3caJbbbZjbMWaDVoSiapjZaZjaaZbaaJXbbpnZL2KATn6eaZXbaJbaaJXaaJTaaJTbb5rZLl59SXuaZ5XbLl16RHeYaJPbaJK9NmuQLFx3Nm6PQXadL2J9OWWAU3WHSmyCMGODLFp2MmeGM2WFQWmBTWaAsZW+WgAAAGt0Uk5TAIP/ksT/////wlID1v///////////7P////////////////////////////////////////////////////////////////////////////////////////////////////4jq3/////3xQJFXi3AAAAxklEQVR4nGNgAANGJmYGZMDCysbOwcnFDePz8PLxCwgKCYuIQvhi4hKS/FLSMrJy8hABBUUlZRVVNVl1DU2IgJa2jq6evpyBuqERRMDYxBQoYGZuqG8BEbBUN9Ww0rfWt7G1gwjYm5s6OOrr69vaOEEEnK1NrV30bW1d3dwhAh6epl623t7ePr5+EAF/L1PvgMCg4JDQMIhAuK2pt49PRHBISCREIMrVFCgdHRwTGwcRiPcBCgQnJCYlQ/2WkpqWnpGZBeEAACDEIoz/Y7GXAAAAAElFTkSuQmCC"
$Icon = "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAAAAChZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/n2MA/59iAP+fYgD/oWQA/6FlAP+hZQD/oGMA/59iAP+fYgD/oGQA/6BkAP+fYwD/oGMA/6BjAP+hZQD/oGMA/59jAP+gYwD/n2IA/6BkAP+hZQD/oGQA/59iAP+gYwD/oGMA/59iAP+gYwD/oWUA/6FlAP+hZQD/oWQA/6ZtDf/DnmH/x6Vs/8aiZ/+pcxn/oGQA/6VrC//CnF3/x6Vr/8imbf+ygTH/rnso/8ytef/TuIz/v5dU/6VrDP+xgC7/zKx3/9S6kP/Go2j/q3Ud/6BkAP+sdyD/wZta/9CzhP/UupD/y6p0/7KDMv+hZQL/oWUA/6FlAP+gZAD/qHAU/9/LrP/+/v7/7ODP/615Jv+fYQD/pWwP/+HOsv//////8+vh/8ekb//r3sv//fv6/+/m1//07eP/5NO5//Pt4v/59vH/8ure//r49P/r4M3/tYc9/9jBnf/+/v7/+fbx//bx6f/8+vj/9vHo/8KcXf+gZAD/oWUA/6FlAP+gZAD/q3Ue//Hp3P/j0bf/sH0t/698Kf+ueyj/1r2X///////Jp3H/vpVT///////bxaL/pm4R/8KcX//9/Pv/697L/7WIO/+2iD//7ODQ///////l1bz/uo9K/8OfYf+ygjH/rHch/76WVP/48+3/6+DN/6dvEf+hZAD/oWUA/6FlAP+hZQD/17+Y//7+/f/28Oj/9e/n//Xv5//8+vj/9vHq/698K//CnVz//////8urd/+dXwD/yKdv//38+v+9lFL/qHEa/+jZxP/49O3/7uPU//r49P+3ikD/nV8A/59hAP+kagr/vpZU//j07v/x6Nr/qXMY/6BkAP+hZQD/oWUA/6BjAP+7kUz//Pv5/93Jqv+9k1D/1LmS///////hz7P/oWUC/8OeXv//////y6t2/55gAP/RtYf/+/j1/7KCNP/MrHn//fv6/8SfZP/FoWb//v38/72UUv+qdBz/zK15/+nbxv/8+fb//fv5/9G1iP+iZgP/oWUA/6FlAP+hZQD/oWQA/6hwFf/t49P/49K5/6JmCf/VvJT//////8WhZv+dXgD/wpxf///////Kqnb/nF0A/8KcYP/9/Pv/yKZv/+LQtP/x6Nv/qXMf/9rDoP/49O3/wJlb/+rdyP//////9vHq/9/MrP++lVL/o2kI/6FlAP+hZQD/oWUA/6FlAP+hZQD/oGQA/9K3jP/49O7/vJJR/+/m1//07uT/rXon/7eLQP/cxqL//////+DNrv/FoWX/u5FM/+ncyP/fzK//4tC2//Xv5v/aw6H/+/n2/9i/mv/Lq3f//////9/Mrv+vfSr/pGoK/7OENf+rdh3/oWQA/6FlAP+hZQD/oWUA/6FlAP+gYwD/tolA//n18P/p3cv//fz7/9zHpv+iZwb/176X//r38v//////+fbw//Xv5v/Ipm3/sYEw/9G1if/Psob//fz6//j17//Zwpz/p3AV/8ajaP//////1LqQ/6hwFf+vfCr/8OfZ/8qqdP+fYgD/oWUA/6FlAP+hZQD/oWUA/6NoBv/PsYL/+vfz///////9/Pv/wJlZ/59jAP+nbxH/y6p0///////Ston/q3Ud/6ZuD/+gYwD/pGkJ/6lyGP+7kEr/soIx/6NoB/+gYwD/q3Ud/+XVvP/8+vj/8+vf//Ho3P/+/v3/zrB9/6BjAP+hZQD/oWUA/6FlAP+hZQD/o2gG/8ajaP/RtYb/0bSF/8yseP+ocRb/oWQA/6BjAP+ygjH/0bSG/7aIPf+fYgD/oWQA/6FlAP+hZQD/oWQA/59jAP+gYwD/oWUA/6FlAP+gZAD/qHEW/8KcXf/St4v/07iM/8mnb/+wfiv/oWQA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oGMA/6BjAP+gYwD/oGMA/6FlAP+hZQD/oWUA/6BkAP+gYwD/oGQA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZAD/n2IA/6BjAP+gYwD/n2IA/6BkAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/oWUA/6FlAP+hZQD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
$LogoImg = ""
$iconBytes = [Convert]::FromBase64String($Icon)
$IconStream  = New-Object IO.MemoryStream($iconBytes, 0, $iconBytes.Length)
$IconStream.Write($iconBytes, 0, $iconBytes.Length)

#################################################################################################################################################################################################
#Global variables
$global:Config =  New-Object PSObject -Property @{envFileLocation =""; ReportLocation = ""; Customer = @{'CustomerName' = "";'ReportName' = ""; 'NameTemplate' = ""}; Mail = @{SendByEmail = "No"; Transport = ""; 'e-mailTo' = ""; 'e-mailFrom' = ""; Subject = ""; BodyText = ""; AttachReport =""; vROHostName = ""; vROSMTPServer =""; vROSSHUser = ""; vROSSHPassword = ""; vROUser = ""; vROPassword = ""; SMTPServer = ""}; Properties = @{} }
$global:ConfigPath = ""
$global:RowIndex = 0
#Local variables
$PuttyPath = $PSScriptRoot + "\Modules\putty.exe"
$ModulePath = $($Env:WinDir + "\system32\WindowsPowerShell\v1.0\Modules\ScheduledTasks")
#$env:PSModulePath += $ModulePath

#Load PAF Properties
$global:PAFDefaultConfig = Get-Content -Path "$PSScriptRoot\defaults.pafp" | ConvertFrom-Json
#$global:Config.Properties = $global:PAFDefaultConfig

#Import modules
If (-Not (Get-Module).Name.Contains("ScheduledTasks")) { Import-Module $ModulePath -ea "Stop" }
#If (-Not (Get-Module).Name.Contains("CIEditor")) { Import-Module "$PSScriptRoot\Modules\PAF\CIEditor.psm1" -WarningAction SilentlyContinue }

#Loading C# extensions
If (-not ("CheckComboBox.CheckedComboBox" -as [type])) { 
Add-Type @"

using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Drawing;
using System.Diagnostics;

namespace CheckComboBox {
    public class CheckedComboBox : ComboBox {
        /// <summary>
        /// Internal class to represent the dropdown list of the CheckedComboBox
        /// </summary>
        internal class Dropdown : Form {
            // ---------------------------------- internal class CCBoxEventArgs --------------------------------------------
            /// <summary>
            /// Custom EventArgs encapsulating value as to whether the combo box value(s) should be assignd to or not.
            /// </summary>
            internal class CCBoxEventArgs : EventArgs {
                private bool assignValues;
                public bool AssignValues {
                    get { return assignValues; }
                    set { assignValues = value; }
                }
                private EventArgs e;
                public EventArgs EventArgs {
                    get { return e; }
                    set { e = value; }
                }
                public CCBoxEventArgs(EventArgs e, bool assignValues) : base() {
                    this.e = e;
                    this.assignValues = assignValues;
                }
            }

            // ---------------------------------- internal class CustomCheckedListBox --------------------------------------------

            /// <summary>
            /// A custom CheckedListBox being shown within the dropdown form representing the dropdown list of the CheckedComboBox.
            /// </summary>
            internal class CustomCheckedListBox : CheckedListBox {
                private int curSelIndex = -1;

                public CustomCheckedListBox() : base() {
                    this.SelectionMode = SelectionMode.One;
                    this.HorizontalScrollbar = true;                    
                }

                /// <summary>
                /// Intercepts the keyboard input, [Enter] confirms a selection and [Esc] cancels it.
                /// </summary>
                /// <param name="e">The Key event arguments</param>
                protected override void OnKeyDown(KeyEventArgs e) {
                    if (e.KeyCode == Keys.Enter) {
                        // Enact selection.
                        ((CheckedComboBox.Dropdown) Parent).OnDeactivate(new CCBoxEventArgs(null, true));
                        e.Handled = true;

                    } else if (e.KeyCode == Keys.Escape) {
                        // Cancel selection.
                        ((CheckedComboBox.Dropdown) Parent).OnDeactivate(new CCBoxEventArgs(null, false));
                        e.Handled = true;

                    } else if (e.KeyCode == Keys.Delete) {
                        // Delete unckecks all, [Shift + Delete] checks all.
                        for (int i = 0; i < Items.Count; i++) {
                            SetItemChecked(i, e.Shift);
                        }
                        e.Handled = true;
                    }
                    // If no Enter or Esc keys presses, let the base class handle it.
                    base.OnKeyDown(e);
                }

                protected override void OnMouseMove(MouseEventArgs e) {
                    base.OnMouseMove(e);
                    int index = IndexFromPoint(e.Location);
                    Debug.WriteLine("Mouse over item: " + (index >= 0 ? GetItemText(Items[index]) : "None"));
                    if ((index >= 0) && (index != curSelIndex)) {
                        curSelIndex = index;
                        SetSelected(index, true);
                    }
                }

            } // end internal class CustomCheckedListBox

            // --------------------------------------------------------------------------------------------------------

            // ********************************************* Data *********************************************

            private CheckedComboBox ccbParent;

            // Keeps track of whether checked item(s) changed, hence the value of the CheckedComboBox as a whole changed.
            // This is simply done via maintaining the old string-representation of the value(s) and the new one and comparing them!
            private string oldStrValue = "";
            public bool ValueChanged {
                get {
                    string newStrValue = ccbParent.Text;
                    if ((oldStrValue.Length > 0) && (newStrValue.Length > 0)) {
                        return (oldStrValue.CompareTo(newStrValue) != 0);
                    } else {
                        return (oldStrValue.Length != newStrValue.Length);
                    }
                }
            }

            // Array holding the checked states of the items. This will be used to reverse any changes if user cancels selection.
            bool[] checkedStateArr;

            // Whether the dropdown is closed.
            private bool dropdownClosed = true;

            private CustomCheckedListBox cclb;
            public CustomCheckedListBox List {
                get { return cclb; }
                set { cclb = value; }
            }

            // ********************************************* Construction *********************************************

            public Dropdown(CheckedComboBox ccbParent) {
                this.ccbParent = ccbParent;
                InitializeComponent();
                this.ShowInTaskbar = false;
                // Add a handler to notify our parent of ItemCheck events.
                this.cclb.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.cclb_ItemCheck);
            }

            // ********************************************* Methods *********************************************

            // Create a CustomCheckedListBox which fills up the entire form area.
            private void InitializeComponent() {
                this.cclb = new CustomCheckedListBox();
                this.SuspendLayout();
                // 
                // cclb
                // 
                this.cclb.BorderStyle = System.Windows.Forms.BorderStyle.None;
                this.cclb.Dock = System.Windows.Forms.DockStyle.Fill;
                this.cclb.FormattingEnabled = true;
                this.cclb.Location = new System.Drawing.Point(0, 0);
                this.cclb.Name = "cclb";
                this.cclb.Size = new System.Drawing.Size(47, 15);
                this.cclb.TabIndex = 0;
                // 
                // Dropdown
                // 
                this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
                this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
                this.BackColor = System.Drawing.SystemColors.Menu;
                this.ClientSize = new System.Drawing.Size(47, 16);
                this.ControlBox = false;
                this.Controls.Add(this.cclb);
                this.ForeColor = System.Drawing.SystemColors.ControlText;
                this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedToolWindow;
                this.MinimizeBox = false;
                this.Name = "ccbParent";
                this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
                this.ResumeLayout(false);
            }

            public string GetCheckedItemsStringValue() {
                StringBuilder sb = new StringBuilder("");
                for (int i = 0; i < cclb.CheckedItems.Count; i++) {                    
                    sb.Append(cclb.GetItemText(cclb.CheckedItems[i])).Append(ccbParent.ValueSeparator);
                }
                if (sb.Length > 0) {
                    sb.Remove(sb.Length - ccbParent.ValueSeparator.Length, ccbParent.ValueSeparator.Length);
                }
                return sb.ToString();
            }

            /// <summary>
            /// Closes the dropdown portion and enacts any changes according to the specified boolean parameter.
            /// NOTE: even though the caller might ask for changes to be enacted, this doesn't necessarily mean
            ///       that any changes have occurred as such. Caller should check the ValueChanged property of the
            ///       CheckedComboBox (after the dropdown has closed) to determine any actual value changes.
            /// </summary>
            /// <param name="enactChanges"></param>
            public void CloseDropdown(bool enactChanges) {
                if (dropdownClosed) {
                    return;
                }                
                Debug.WriteLine("CloseDropdown");
                // Perform the actual selection and display of checked items.
                if (enactChanges) {
                    ccbParent.SelectedIndex = -1;                    
                    // Set the text portion equal to the string comprising all checked items (if any, otherwise empty!).
                    ccbParent.Text = GetCheckedItemsStringValue();

                } else {
                    // Caller cancelled selection - need to restore the checked items to their original state.
                    for (int i = 0; i < cclb.Items.Count; i++) {
                        cclb.SetItemChecked(i, checkedStateArr[i]);
                    }
                }
                // From now on the dropdown is considered closed. We set the flag here to prevent OnDeactivate() calling
                // this method once again after hiding this window.
                dropdownClosed = true;
                // Set the focus to our parent CheckedComboBox and hide the dropdown check list.
                ccbParent.Focus();
                this.Hide();
                // Notify CheckedComboBox that its dropdown is closed. (NOTE: it does not matter which parameters we pass to
                // OnDropDownClosed() as long as the argument is CCBoxEventArgs so that the method knows the notification has
                // come from our code and not from the framework).
                ccbParent.OnDropDownClosed(new CCBoxEventArgs(null, false));
            }

            protected override void OnActivated(EventArgs e) {
                Debug.WriteLine("OnActivated");
                base.OnActivated(e);
                dropdownClosed = false;
                // Assign the old string value to compare with the new value for any changes.
                oldStrValue = ccbParent.Text;
                // Make a copy of the checked state of each item, in cace caller cancels selection.
                checkedStateArr = new bool[cclb.Items.Count];
                for (int i = 0; i < cclb.Items.Count; i++) {
                    checkedStateArr[i] = cclb.GetItemChecked(i);
                }
            }

            protected override void OnDeactivate(EventArgs e) {
                Debug.WriteLine("OnDeactivate");
                base.OnDeactivate(e);
                CCBoxEventArgs ce = e as CCBoxEventArgs;
                if (ce != null) {
                    CloseDropdown(ce.AssignValues);

                } else {
                    // If not custom event arguments passed, means that this method was called from the
                    // framework. We assume that the checked values should be registered regardless.
                    CloseDropdown(true);
                }
            }

            private void cclb_ItemCheck(object sender, ItemCheckEventArgs e) {
                if (ccbParent.ItemCheck != null) {
                    ccbParent.ItemCheck(sender, e);
                }
            }

        } // end internal class Dropdown

        // ******************************** Data ********************************
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;
        // A form-derived object representing the drop-down list of the checked combo box.
        private Dropdown dropdown;

        // The valueSeparator character(s) between the ticked elements as they appear in the 
        // text portion of the CheckedComboBox.
        private string valueSeparator;
        public string ValueSeparator {
            get { return valueSeparator; }
            set { valueSeparator = value; }
        }

        public bool CheckOnClick {
            get { return dropdown.List.CheckOnClick; }
            set { dropdown.List.CheckOnClick = value; }
        }

        public new string DisplayMember {
            get { return dropdown.List.DisplayMember; }
            set { dropdown.List.DisplayMember = value; }
        }

        public new CheckedListBox.ObjectCollection Items {
            get { return dropdown.List.Items; }
        }

        public CheckedListBox.CheckedItemCollection CheckedItems {
            get { return dropdown.List.CheckedItems; }
        }
        
        public CheckedListBox.CheckedIndexCollection CheckedIndices {
            get { return dropdown.List.CheckedIndices; }
        }

        public bool ValueChanged {
            get { return dropdown.ValueChanged; }
        }

        // Event handler for when an item check state changes.
        public event ItemCheckEventHandler ItemCheck;
        
        // ******************************** Construction ********************************

        public CheckedComboBox() : base() {
            // We want to do the drawing of the dropdown.
            this.DrawMode = DrawMode.OwnerDrawVariable;
            // Default value separator.
            this.valueSeparator = ", ";
            // This prevents the actual ComboBox dropdown to show, although it's not strickly-speaking necessary.
            // But including this remove a slight flickering just before our dropdown appears (which is caused by
            // the empty-dropdown list of the ComboBox which is displayed for fractions of a second).
            this.DropDownHeight = 1;            
            // This is the default setting - text portion is editable and user must click the arrow button
            // to see the list portion. Although we don't want to allow the user to edit the text portion
            // the DropDownList style is not being used because for some reason it wouldn't allow the text
            // portion to be programmatically set. Hence we set it as editable but disable keyboard input (see below).
            this.DropDownStyle = ComboBoxStyle.DropDown;
            this.dropdown = new Dropdown(this);
            // CheckOnClick style for the dropdown (NOTE: must be set after dropdown is created).
            this.CheckOnClick = true;
        }

        // ******************************** Operations ********************************

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing) {
            if (disposing && (components != null)) {
                components.Dispose();
            }
            base.Dispose(disposing);
        }        

        protected override void OnDropDown(EventArgs e) {
            base.OnDropDown(e);
            DoDropDown();    
        }

        private void DoDropDown() {
            if (!dropdown.Visible) {
                Rectangle rect = RectangleToScreen(this.ClientRectangle);
                dropdown.Location = new Point(rect.X, rect.Y + this.Size.Height);
                int count = dropdown.List.Items.Count;
                if (count > this.MaxDropDownItems) {
                    count = this.MaxDropDownItems;
                } else if (count == 0) {
                    count = 1;
                }
                dropdown.Size = new Size(this.Size.Width, (dropdown.List.ItemHeight) * count + 2);
                dropdown.Show(this);
            }
        }

        protected override void OnDropDownClosed(EventArgs e) {
            // Call the handlers for this event only if the call comes from our code - NOT the framework's!
            // NOTE: that is because the events were being fired in a wrong order, due to the actual dropdown list
            //       of the ComboBox which lies underneath our dropdown and gets involved every time.
            if (e is Dropdown.CCBoxEventArgs) {
                base.OnDropDownClosed(e);
            }
        }

        protected override void OnKeyDown(KeyEventArgs e) {
            if (e.KeyCode == Keys.Down) {
                // Signal that the dropdown is "down". This is required so that the behaviour of the dropdown is the same
                // when it is a result of user pressing the Down_Arrow (which we handle and the framework wouldn't know that
                // the list portion is down unless we tell it so).
                // NOTE: all that so the DropDownClosed event fires correctly!                
                OnDropDown(null);
            }
            // Make sure that certain keys or combinations are not blocked.
            e.Handled = !e.Alt && !(e.KeyCode == Keys.Tab) &&
                !((e.KeyCode == Keys.Left) || (e.KeyCode == Keys.Right) || (e.KeyCode == Keys.Home) || (e.KeyCode == Keys.End));

            base.OnKeyDown(e);
        }

        protected override void OnKeyPress(KeyPressEventArgs e) {
            e.Handled = true;
            base.OnKeyPress(e);
        }

        public bool GetItemChecked(int index) {
            if (index < 0 || index > Items.Count) {
                throw new ArgumentOutOfRangeException("index", "value out of range");
            } else {
                return dropdown.List.GetItemChecked(index);
            }
        }

        public void SetItemChecked(int index, bool isChecked) {
            if (index < 0 || index > Items.Count) {
                throw new ArgumentOutOfRangeException("index", "value out of range");
            } else {
                dropdown.List.SetItemChecked(index, isChecked);
                // Need to update the Text.
                this.Text = dropdown.GetCheckedItemsStringValue();
            }
        }

        public CheckState GetItemCheckState(int index) {
            if (index < 0 || index > Items.Count) {
                throw new ArgumentOutOfRangeException("index", "value out of range");
            } else {
                return dropdown.List.GetItemCheckState(index);
            }
        }

        public void SetItemCheckState(int index, CheckState state) {
            if (index < 0 || index > Items.Count) {
                throw new ArgumentOutOfRangeException("index", "value out of range");
            } else {
                dropdown.List.SetItemCheckState(index, state);
                // Need to update the Text.
                this.Text = dropdown.GetCheckedItemsStringValue();
            }
        }

    } // end public class CheckedComboBox
    
    public class CCBoxItem {
        private int val;
        public int Value {
            get { return val; }
            set { val = value; }
        }
        
        private string name;
        public string Name {
            get { return name; }
            set { name = value; }
        }

        public CCBoxItem() {
        }

        public CCBoxItem(string name, int val) {
            this.name = name;
            this.val = val;
        }

        public override string ToString() {
            return string.Format("name: '{0}', value: {1}", name, val);
        }
    }
}


"@ -ReferencedAssemblies 'System.Windows.Forms.dll','System.Drawing.dll','System.Data.dll'
}

#General functions
Function Encrypt {
	param ( [Parameter(Mandatory=$true)] $Variable )
$Content = $Variable | ConvertTo-Json -Depth 10 -Compress
$Thumbprint = Get-Content "ssl.thumb"  -ea "SilentlyContinue"
Return Protect-CmsMessage -Content $Content -to $Thumbprint
}

Function Decrypt {
	param ( [Parameter(Mandatory=$true)] $Path )
Try {
	If (Get-Content -Path $Path) { Return Get-Content -Path $Path | Unprotect-CmsMessage | ConvertFrom-Json }
	Else {
		$env = New-Object psobject
		Return $env
		}
	}
Catch {
	[System.Windows.Forms.MessageBox]::Show(("Security key mismatch!"),"",0,16) | out-null
	Return $false
	}
}

Function Save-Dialog {
param ( $FileName, $FileFilter) 
$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
$SaveChooser.FileName = $FileName 
$SaveChooser.Filter = $FileFilter
$SaveChooser.InitialDirectory = $PSScriptRoot
If ($SaveChooser.ShowDialog() -eq "OK") { Return $SaveChooser.Filename }
Else { Return $false }
}

Function Open-File-Dialog {
param ( $FileName, $FileFilter, $Title )
$LoadChooser = New-Object -Typename System.Windows.Forms.OpenFileDialog
$LoadChooser.Title  = $Title
$LoadChooser.FileName = $FileName
$LoadChooser.Filter =  $FileFilter
$LoadChooser.InitialDirectory = $PSScriptRoot
If($LoadChooser.ShowDialog() -eq "OK") { Return $LoadChooser.Filename }
Else { Return $false }
}

Function Open-Folder-Dialog {
param ( $Textbox )
$FolderChooser = New-Object -Typename System.Windows.Forms.FolderBrowserDialog
$FolderChooser.SelectedPath = $PSScriptRoot
$FolderChooser.Description = "Select a folder"
If ($FolderChooser.ShowDialog() -eq "OK") {
	$Textbox.Text = $FolderChooser.SelectedPath
	$Textbox.SelectionStart = $Textbox.Text.Length + 1
	}
}

Function PAFConfig-NewEnv {
$FilePath = Save-Dialog -FileName "env.pafe" -FileFilter "environment file|*.pafe"
If ($FilePath) {
	New-Item $FilePath -ItemType File -Force
	[System.Windows.Forms.MessageBox]::Show(("Environment file has been created"),"PAF Configuration") | out-null
	$envLocation.Text = $FilePath
	$global:Config.envFileLocation = $FilePath
	}
}

Function PAFConfig-OpenEnv {
$EnvPath = Open-File-Dialog -FileName "env.pafe" -FileFilter "environment file|*.pafe"
If ($EnvPath) { 
	$env = Decrypt -Path $EnvPath
	If ($env) { PAFCI-EditForm -Environment $env -Path $EnvPath}
	}
}

Function PAFConfig-EditEnv {
param ( $Path )
If ($ConfForm.Text -eq "PAF Configuration") {
	If ([System.Windows.Forms.MessageBox]::Show(("Config file is not selected. Do you want to select it now?"),"PAF Configuration",4,48) -eq "Yes") { PAFConfig-Open }
	}
Else {
	If ($envLocation.Text) {
		If (Test-Path $envLocation.Text -PathType Leaf) {
			$env = Decrypt -Path $Path
			If ($env) { PAFCI-EditForm -Environment $env -Path $Path}
			}
		Else { [System.Windows.Forms.MessageBox]::Show(("Path to environment file is incorrect. Please set a proper path"),"PAF Configuration",0,16) | out-null }
		}
	Else { 
		If ([System.Windows.Forms.MessageBox]::Show(("Environment file does not exist. Do you want to create it now?"),"PAF Configuration",4) -eq "Yes") { PAFCI-New }
		}
	}
}

#Load CI Editor
. $("$PSScriptRoot\Modules\PAF\CIEditor.ps1") -ea "Stop"

#Config management functions
Function PAFConfig-SetMailTransport {
Switch ($MailingType.SelectedItem) {
	"SMTP Server" {
		$TransportSettingsVRO.Visible = $false
		$TransportSettingsSMTP.Visible = $true
		}
	"vRealize Orchestrator" {
		$TransportSettingsVRO.Visible = $true
		$TransportSettingsSMTP.Visible = $false
		}
	}
PAFConfig-FormUpdated
}

Function PAFConfig-Open {
If ($global:ConfFormUpdated) {
	$Response = [System.Windows.Forms.MessageBox]::Show(("Do you want to save unsaved changes to $($global:ConfigPath -replace '.*\\')?`n`nIf you click ""No"" last changes will not be saved"),"PAF Configuration",3,48)
	If ($Response -eq "Yes") { PAFConfig-Save }
	If ($Response -eq "Cancel") { Return }
	}

$LoadChooser = New-Object -Typename System.Windows.Forms.OpenFileDialog
$LoadChooser.FileName = "config.pafc"
$LoadChooser.Filter =  "config file|*.pafc"
$LoadChooser.InitialDirectory = $PSScriptRoot
If ($LoadChooser.ShowDialog() -eq "OK") {
	$global:Config = Decrypt -Path $($LoadChooser.Filename)
	$global:ConfigPath = $LoadChooser.Filename
	$ConfForm.Text = $($global:ConfigPath -replace ".*\\") + " -  PowerShell Automation Framework configuration"
	$envLocation.Text = $global:Config.envFileLocation
	$ReportLocation.Text = $global:Config.ReportLocation
	$CustomerName.Text = $($global:Config.Customer).CustomerName
	$ReportName.Text = $($global:Config.Customer).ReportName
	$ReportFileTemplate.Text = ($global:Config.Customer).'NameTemplate'
	$SendByEmail.SelectedItem = If (!$($global:Config.Mail).SendByEmail) { "No" } Else { $($global:Config.Mail).SendByEmail}
	$MailingType.SelectedItem = $($global:Config.Mail).Transport
	$MailTo.Text = $($global:Config.Mail).'e-mailTo'
	$MailFrom.Text= $($global:Config.Mail).'e-mailFrom'
	$MailSubject.Text = $($global:Config.Mail).Subject
	$MailBodyText.Text = $($global:Config.Mail).BodyText
	If ($($global:Config.Mail).AttachReport) { $Attachreport.Checked = $true } Else { $Attachreport.Checked = $false } 
	$vROHostName.Text = $($global:Config.Mail).vROHostName
	$vROSMTPServer.Text = $($global:Config.Mail).vROSMTPServer
	$vROSSHUser.Text = $($global:Config.Mail).vROSSHUser
	$vROSSHPassword.Text = $($global:Config.Mail).vROSSHPassword
	$vROUser.Text = $($global:Config.Mail).vROUser
	$vROPassword.Text = $($global:Config.Mail).vROPassword
	$SMTPServer.Text = $($global:Config.Mail).SMTPServer
	$envLocation.SelectionStart = $envLocation.Text.Length + 1
	$ReportLocation.SelectionStart = $ReportLocation.Text.Length + 1
	$global:ConfFormUpdated = $false
	}
}

Function PAFConfig-SavePrechecks {
If (!$CustomerName.Text) {
	[System.Windows.Forms.MessageBox]::Show(("Customer name cannot be blank. Please set a customer name"),"PAF Configuration",0,16) | out-null
	Return
	}
If (!$ReportName.Text) {
	[System.Windows.Forms.MessageBox]::Show(("Report name cannot be blank. Please set a report name"),"PAF Configuration",0,16) | out-null
	Return
	}
If (!$ReportLocation.Text) {
	[System.Windows.Forms.MessageBox]::Show(("Path to reports folder is empty. Please set a proper path"),"PAF Configuration",0,16) | out-null
	Return
	}
If (!$ReportFileTemplate.Text) {
	[System.Windows.Forms.MessageBox]::Show(("Report file template cannot be blank. Please set a template"),"PAF Configuration",0,16) | out-null
	Return
	}
If ($SendByEmail.SelectedItem -eq "Yes") {
	If (!$MailTo.Text) {
	[System.Windows.Forms.MessageBox]::Show(("Mail recipient cannot be blank. Please specify a receiver"),"PAF Configuration",0,16) | out-null
	Return
	}
	If (!$MailFrom.Text) {
	[System.Windows.Forms.MessageBox]::Show(("Mail sender cannot be blank. Please specify a sender"),"PAF Configuration",0,16) | out-null
	Return
	}
	If (!$MailSubject.Text) {
	[System.Windows.Forms.MessageBox]::Show(("Mail subject cannot be blank. Please set mail subject"),"PAF Configuration",0,16) | out-null
	Return
	}
	If ($MailingType.SelectedIndex -eq 0 -and !$SMTPServer.text) {
		[System.Windows.Forms.MessageBox]::Show(("SMTP server address cannot be blank. Please set SMTP server address"),"PAF Configuration",0,16) | out-null
		Return
		}
	If ($MailingType.SelectedIndex -eq 1 -and (!$vROHostName.Text -or !$vROSMTPServer.Text -or !$vROSSHUser.Text -or !$vROSSHPassword.Text -or !$vROPassword.text)) {
		[System.Windows.Forms.MessageBox]::Show(("vRO mail settings cannot be blank. Please specify all vRO mail settings"),"PAF Configuration",0,16) | out-null
		Return
		}	
	}
Return $true
}

Function PAFConfig-Save {
If (PAFConfig-SavePrechecks) {
	$global:Config.envFileLocation = $envLocation.Text
	$global:Config.ReportLocation = $ReportLocation.Text
	$($global:Config.Customer).CustomerName = $CustomerName.Text
	$($global:Config.Customer).ReportName = $ReportName.Text
	($global:Config.Customer).'NameTemplate' = $ReportFileTemplate.Text
	$($global:Config.Mail).SendByEmail = $SendByEmail.SelectedItem
	If ($SendByEmail.SelectedItem -eq "Yes") {
		$($global:Config.Mail).Transport = $MailingType.SelectedItem
		$($global:Config.Mail).'e-mailTo' = $MailTo.Text
		$($global:Config.Mail).'e-mailFrom' = $MailFrom.Text
		$($global:Config.Mail).Subject = $MailSubject.Text
		$($global:Config.Mail).BodyText = $MailBodyText.Text
		If ($Attachreport.Checked) {$($global:Config.Mail).AttachReport = 1 } Else { $($global:Config.Mail).AttachReport = "" } 
		If ($MailingType.SelectedItem -eq "vRealize Orchestrator") {
			$($global:Config.Mail).vROHostName = $vROHostName.text
			$($global:Config.Mail).vROSMTPServer = $vROSMTPServer.text
			$($global:Config.Mail).vROSSHUser = $vROSSHUser.text
			$($global:Config.Mail).vROSSHPassword = $vROSSHPassword.text
			$($global:Config.Mail).vROUser = $vROUser.text
			$($global:Config.Mail).vROPassword = $vROPassword.text
			}
		If ($MailingType.SelectedItem -eq "SMTP Server") {
			$($global:Config.Mail).SMTPServer = $SMTPServer.text
			}
		}#>
	Else { $global:Config.Mail = @{SendByEmail = "No"; Transport = ""; 'e-mailTo' = ""; 'e-mailFrom' = ""; Subject = ""; BodyText = ""; AttachReport =""; vROHostName = ""; vROSMTPServer =""; vROSSHUser = ""; vROSSHPassword = ""; vROUser = ""; vROPassword = ""; SMTPServer = ""} }
	
	If (!$global:ConfigPath) { 
		PAFConfig-SaveAs
		Return
		}
	Encrypt -Variable $global:Config | Set-Content -Path $global:ConfigPath
		
	$ConfForm.Text = $($global:ConfigPath -replace ".*\\") + " -  PowerShell Automation Framework configuration"

	[System.Windows.Forms.MessageBox]::Show(("Configuration saved"),"PAF Configuration") | out-null

	#Set textbox values according to saved values
	$envLocation.Text = $global:Config.envFileLocation
	$ReportLocation.Text = $global:Config.ReportLocation
	$CustomerName.Text = $($global:Config.Customer).CustomerName
	$ReportName.Text = $($global:Config.Customer).ReportName
	$ReportFileTemplate.Text = ($global:Config.Customer).'NameTemplate'
	$SendByEmail.SelectedItem = $($global:Config.Mail).SendByEmail
	$MailingType.SelectedItem = $($global:Config.Mail).Transport
	$MailTo.Text = $($global:Config.Mail).'e-mailTo'
	$MailFrom.Text= $($global:Config.Mail).'e-mailFrom'
	$MailSubject.Text = $($global:Config.Mail).Subject
	$MailBodyText.Text = $($global:Config.Mail).BodyText
	$vROHostName.Text = $($global:Config.Mail).vROHostName
	$vROSMTPServer.Text = $($global:Config.Mail).vROSMTPServer
	$vROSSHUser.Text = $($global:Config.Mail).vROSSHUser
	$vROSSHPassword.Text = $($global:Config.Mail).vROSSHPassword
	$vROUser.Text = $($global:Config.Mail).vROUser
	$vROPassword.Text = $($global:Config.Mail).vROPassword
	$SMTPServer.Text = $($global:Config.Mail).SMTPServer
	$global:ConfFormUpdated = $false
	}
}

Function PAFConfig-SaveAs {
If (PAFConfig-SavePrechecks) {
	$FilePath = Save-Dialog -FileName "config.pafc" -FileFilter "config file|*.pafc"
	If ($FilePath) { 
		$global:ConfigPath = $FilePath
		PAFConfig-Save
		}
	}
}

Function PAFConfig-Exit {
#If ($global:ConfigPath) {
	$_.Cancel = $true
	If ($global:ConfFormUpdated) {
		$Response = [System.Windows.Forms.MessageBox]::Show(("Do you want to save unsaved changes to $($global:ConfigPath -replace '.*\\')?`n`nIf you click ""No"" last changes will not be saved"),"PAF Configuration",3,48)
		If ($Response -eq "Yes") {
			PAFConfig-Save
			$_.Cancel = $false
			}
		If ($Response -eq "No") { $_.Cancel = $false }
		}
	Else { $_.Cancel = $false }
	#}
}

#####SSL Task scheduler form here
Function PAFConfig-ScheduleForm {
If ($PSVersionTable.PSVersion -lt [Version]'5.1'){
	[System.Windows.Forms.MessageBox]::Show(("PowerShell version $($PSVersionTable.PSVersion.ToString()) is not supported. Minimum required version is 5.1"),"PAF Configuration",0,16) | out-null
	Return
	}
$culture = [Globalization.CultureInfo]::InvariantCulture
$Months = ("All","January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")

$ScheduleForm = New-Object system.Windows.Forms.Form
$ScheduleForm.ClientSize = '570,455'
$ScheduleForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$ScheduleForm.Text = "Task Scheduler"
$ScheduleForm.TopMost = $false
$ScheduleForm.FormBorderStyle = 'FixedSingle'
$ScheduleForm.MaximizeBox = $false
$ScheduleForm.StartPosition = "centerscreen"

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Name: "
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,20)
$ScheduleForm.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(135,20)
$ScheduleForm.Controls.Add($Label)

$text_name = New-Object system.Windows.Forms.TextBox
$text_name.multiline = $false
$text_name.Width = 410
$text_name.Height = 20
$text_name.Location = New-Object System.Drawing.Point(150,20)
$ScheduleForm.Controls.Add($text_name) 

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Description: "
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,50)
$ScheduleForm.Controls.Add($Label)

$text_description = New-Object system.Windows.Forms.TextBox
$text_description.multiline = $true
$text_description.Width = 410
$text_description.Height = 60
$text_description.Location = New-Object System.Drawing.Point(150,50)
$ScheduleForm.Controls.Add($text_description)
 
$ScheduleSettingsGroupbox = New-Object system.Windows.Forms.Groupbox
$ScheduleSettingsGroupbox.Height = 160
$ScheduleSettingsGroupbox.Width = 550
$ScheduleSettingsGroupbox.Text = "Settings"
$ScheduleSettingsGroupbox.Location = New-Object System.Drawing.Point(10,130)
$ScheduleForm.Controls.Add($ScheduleSettingsGroupbox)

$radio_onetime = New-Object system.Windows.Forms.RadioButton
$radio_onetime.Text = "One time"
$radio_onetime.AutoSize = $true
$radio_onetime.checked = $true
$radio_onetime.Width = 104
$radio_onetime.Height = 20
$radio_onetime.Location = New-Object System.Drawing.Point(10,20)
$radio_onetime.Add_Click({ PAFConfig-ScheduleForm_ShowSettingsGroupbox -GroupboxToShow $Groupbox_Once })
$ScheduleSettingsGroupbox.Controls.Add($radio_onetime)
 
$radio_daily = New-Object system.Windows.Forms.RadioButton
$radio_daily.Text = "Daily"
$radio_daily.AutoSize = $true
$radio_daily.Width = 104
$radio_daily.Height = 20
$radio_daily.Location = New-Object System.Drawing.Point(10,50)
$radio_daily.Add_Click({ PAFConfig-ScheduleForm_ShowSettingsGroupbox -GroupboxToShow $Groupbox_Daily})
$ScheduleSettingsGroupbox.Controls.Add($radio_daily)
 
$radio_weekly = New-Object system.Windows.Forms.RadioButton
$radio_weekly.Text = "Weekly"
$radio_weekly.AutoSize = $true
$radio_weekly.Width = 104
$radio_weekly.Height = 20
$radio_weekly.Location = New-Object System.Drawing.Point(10,80)
$radio_weekly.Add_Click({ PAFConfig-ScheduleForm_ShowSettingsGroupbox -GroupboxToShow $Groupbox_Weekly })
$ScheduleSettingsGroupbox.Controls.Add($radio_weekly)
 
$radio_monthly = New-Object system.Windows.Forms.RadioButton
$radio_monthly.Text = "Monthly"
$radio_monthly.AutoSize = $true
$radio_monthly.Width = 104
$radio_monthly.Height = 20
$radio_monthly.enabled = $true
$radio_monthly.Location = New-Object System.Drawing.Point(10,110)
$radio_monthly.Add_Click({ PAFConfig-ScheduleForm_ShowSettingsGroupbox -GroupboxToShow $Groupbox_Monthly })
$ScheduleSettingsGroupbox.Controls.Add($radio_monthly)

$label_start_time = New-Object system.Windows.Forms.Label
$label_start_time.Text = "Start:"
$label_start_time.AutoSize = $true
$label_start_time.Width = 25
$label_start_time.Height = 10
$label_start_time.Location = New-Object System.Drawing.Point(107,20)
$ScheduleSettingsGroupbox.Controls.Add($label_start_time)

$DatePicker = New-Object System.Windows.Forms.DateTimePicker
$DatePicker.Location = New-Object System.Drawing.Size(140,15)
$DatePicker.Width = "85"
$DatePicker.Format = [windows.forms.datetimepickerFormat]::custom
$DatePicker.CustomFormat = "dd/MM/yyyy"
$ScheduleSettingsGroupbox.Controls.Add($DatePicker)

$TimePicker = New-Object System.Windows.Forms.DateTimePicker
$TimePicker.Location = New-Object System.Drawing.Point(230,15)
$TimePicker.Width = "70"
$TimePicker.Format = [windows.forms.datetimepickerFormat]::custom
$TimePicker.CustomFormat = "HH:mm:ss"
$TimePicker.Value = Get-Date -Format HH:mm:00
$TimePicker.ShowUpDown = $true
$ScheduleSettingsGroupbox.Controls.Add($TimePicker)

#Once
$Groupbox_Once = New-Object system.Windows.Forms.Groupbox
$Groupbox_Once.Height = 100
$Groupbox_Once.Width = 430
$Groupbox_Once.Location = New-Object System.Drawing.Point(100,45)
$Groupbox_Once.visible = $true
$ScheduleSettingsGroupbox.Controls.Add($Groupbox_Once)

#Daily
$Groupbox_Daily = New-Object system.Windows.Forms.Groupbox
$Groupbox_Daily.Height = 100
$Groupbox_Daily.Width = 430
$Groupbox_Daily.Location = New-Object System.Drawing.Point(100,45)
$Groupbox_Daily.visible = $false
$ScheduleSettingsGroupbox.Controls.Add($Groupbox_Daily)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Recur every:"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,20)
$Groupbox_Daily.Controls.Add($Label)

$recur_number_daily = New-Object system.Windows.Forms.TextBox
$recur_number_daily.multiline = $false
$recur_number_daily.Text = "1"
$recur_number_daily.Width = 30
$recur_number_daily.Height = 20
$recur_number_daily.enabled = $true
$recur_number_daily.Location = New-Object System.Drawing.Point(110,15)
$Groupbox_Daily.Controls.Add($recur_number_daily)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "days"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(150,20)
$Groupbox_Daily.Controls.Add($Label)

#Weekly
$Groupbox_Weekly = New-Object system.Windows.Forms.Groupbox
$Groupbox_Weekly.Height = 100
$Groupbox_Weekly.Width = 430
$Groupbox_Weekly.visible = $false
$Groupbox_Weekly.Location = New-Object System.Drawing.Point(100,45)
$ScheduleSettingsGroupbox.Controls.Add($Groupbox_Weekly)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Recur every:"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,20)
$Groupbox_Weekly.Controls.Add($Label)

$recur_number_weekly = New-Object system.Windows.Forms.TextBox
$recur_number_weekly.multiline = $false
$recur_number_weekly.Text = "1"
$recur_number_weekly.Width = 30
$recur_number_weekly.Height = 20
$recur_number_weekly.enabled = $true
$recur_number_weekly.Location = New-Object System.Drawing.Point(110,15)
$Groupbox_Weekly.Controls.Add($recur_number_weekly)
 
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "weeks on:"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(150,20)
$Groupbox_Weekly.Controls.Add($Label)

$check_sunday = New-Object system.Windows.Forms.CheckBox
$check_sunday.Text = "Sunday"
$check_sunday.AutoSize = $true
$check_sunday.enabled = $true
$check_sunday.Location = New-Object System.Drawing.Point(40,40)
$Groupbox_Weekly.Controls.Add($check_sunday)

$check_monday = New-Object system.Windows.Forms.CheckBox
$check_monday.Text = "Monday"
$check_monday.AutoSize = $true
$check_monday.enabled = $true
$check_monday.Location = New-Object System.Drawing.Point(120,40)
$Groupbox_Weekly.Controls.Add($check_monday)

$check_tuesday = New-Object system.Windows.Forms.CheckBox
$check_tuesday.Text = "Tuesday"
$check_tuesday.AutoSize = $true
$check_tuesday.enabled = $true
$check_tuesday.Location = New-Object System.Drawing.Point(200,40)
$Groupbox_Weekly.Controls.Add($check_tuesday)

$check_wednesday = New-Object system.Windows.Forms.CheckBox
$check_wednesday.Text = "Wednesday"
$check_wednesday.AutoSize = $true
$check_wednesday.enabled = $true
$check_wednesday.Location = New-Object System.Drawing.Point(275,40)
$Groupbox_Weekly.Controls.Add($check_wednesday)

$check_thursday = New-Object system.Windows.Forms.CheckBox
$check_thursday.Text = "Thursday"
$check_thursday.AutoSize = $true
$check_thursday.enabled = $true
$check_thursday.Location = New-Object System.Drawing.Point(40,70)
$Groupbox_Weekly.Controls.Add($check_thursday)

$check_friday = New-Object system.Windows.Forms.CheckBox
$check_friday.Text = "Friday"
$check_friday.AutoSize = $true
$check_friday.enabled = $true
$check_friday.Location = New-Object System.Drawing.Point(120,70)
$Groupbox_Weekly.Controls.Add($check_friday)

$check_saturday = New-Object system.Windows.Forms.CheckBox
$check_saturday.Text = "Saturday"
$check_saturday.AutoSize = $true
$check_saturday.enabled = $true
$check_saturday.Location = New-Object System.Drawing.Point(200,70)
$Groupbox_Weekly.Controls.Add($check_saturday) 

#Monthly
$Groupbox_Monthly = New-Object system.Windows.Forms.Groupbox
$Groupbox_Monthly.Height = 100
$Groupbox_Monthly.Width = 430
$Groupbox_Monthly.visible = $false
$Groupbox_Monthly.Location = New-Object System.Drawing.Point(100,45)
$ScheduleSettingsGroupbox.Controls.Add($Groupbox_Monthly)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Months:"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,20)
$Groupbox_Monthly.Controls.Add($Label)

$check_month = New-Object -TypeName 'CheckComboBox.CheckedComboBox'
$check_month.Location = New-Object System.Drawing.Point(110,15)
$check_month.Name = "check_month"
$check_month.MaxDropDownItems = 12
$check_month.DisplayMember = 'Name'

@(0..12) | % { [CheckComboBox.CCBoxItem]$item = New-Object CheckComboBox.CCBoxItem($Months[$_],$_); $check_month.Items.Add($item) | out-null }
$check_month.SetItemChecked(0,$true)
$Groupbox_Monthly.Controls.Add($check_month)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Day:"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,50)
$Groupbox_Monthly.Controls.Add($Label)

$check_month_date = New-Object system.Windows.Forms.ComboBox
@(1..31) | ForEach-Object {[void] $check_month_date.Items.Add($_)}
$check_month_date.Location = New-Object System.Drawing.Point(110,45)
$check_month_date.SelectedItem = 1
$check_month_date.DropDownStyle = "DropDownList"
$Groupbox_Monthly.Controls.Add($check_month_date)

$PathGroupbox = New-Object system.Windows.Forms.Groupbox
$PathGroupbox.Height = 60
$PathGroupbox.Width = 550
$PathGroupbox.Text = "Powershell script path"
$PathGroupbox.Location = New-Object System.Drawing.Point(10,310)
$ScheduleForm.Controls.Add($PathGroupbox)

$text_ps_path = New-Object system.Windows.Forms.TextBox
$text_ps_path.multiline = $false
$text_ps_path.Width = 420
$text_ps_path.Height = 20
$text_ps_path.Location = New-Object System.Drawing.Point(25,25)
$PathGroupbox.Controls.Add($text_ps_path)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,25)
$PathGroupbox.Controls.Add($Label)

$BrowseScript = New-Object system.Windows.Forms.Button
$BrowseScript.Text = "Browse"
$BrowseScript.Width = 80
$BrowseScript.Height = 20
$BrowseScript.Location = New-Object System.Drawing.Point(450,25)
$BrowseScript.Add_Click({ $text_ps_path.Text = Open-File-Dialog -FileFilter "PowerShell Script|*.ps1" })
$PathGroupbox.Controls.Add($BrowseScript)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Use system account"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,390)
$ScheduleForm.Controls.Add($Label)

$use_system = New-Object system.Windows.Forms.CheckBox
$use_system.AutoSize = $true
$use_system.Enabled = $true
$use_system.Checked = $true
$use_system.Location = New-Object System.Drawing.Point(150,390)
$ScheduleForm.Controls.Add($use_system)


$ScheduleForm_btn_ok = New-Object system.Windows.Forms.Button
$ScheduleForm_btn_ok.Text = "OK"
$ScheduleForm_btn_ok.Width = 100
$ScheduleForm_btn_ok.Height = 30
$ScheduleForm_btn_ok.Location = New-Object System.Drawing.Point(340,415)
$ScheduleForm_btn_ok.Add_Click({ PAFConfig-ScheduleTask })
$ScheduleForm.Controls.Add($ScheduleForm_btn_ok)

$ScheduleForm_btn_cancel = New-Object system.Windows.Forms.Button
$ScheduleForm_btn_cancel.Text = "Cancel"
$ScheduleForm_btn_cancel.Width = 100
$ScheduleForm_btn_cancel.Height = 30
$ScheduleForm_btn_cancel.Location = New-Object System.Drawing.Point(460,415)
$ScheduleForm_btn_cancel.Add_Click({ $ScheduleForm.close() })
$ScheduleForm.Controls.Add($ScheduleForm_btn_cancel)


$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,430)
$ScheduleForm.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Mandatory fields"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,430)
$ScheduleForm.Controls.Add($Label)

[void]$ScheduleForm.ShowDialog()
}

Function PAFConfig-ScheduleForm_ShowSettingsGroupbox {
param ( $GroupboxToShow ) 
$Groupbox_Once.visible = $false
$Groupbox_Daily.visible = $false
$Groupbox_Weekly.visible = $false
$Groupbox_Monthly.visible = $false
$GroupboxToShow.visible = $true
}

Function PAFConfig-ScheduleTask {
$s_combo_time = $TimePicker.text
$s_combo_date_time = $DatePicker.Text + " " + $TimePicker.text
$weekly_days = @()
If ($text_name.text) { $s_text_name = $text_name.Text }
Else{
	[System.Windows.Forms.MessageBox]::Show(("Task name is empty. Please name the task"),"PAF Configuration",0,16) | out-null
	Return
	}
If ($radio_onetime.checked) {
	$setting = "onetime"
	}
ElseIf ($radio_daily.checked) {
	$setting = "daily"
	If ($recur_number_daily.text) { $s_recure_number = $recur_number_daily.text}
	Else{
		[System.Windows.Forms.MessageBox]::Show(("Recurrence is empty. Please set up the recurrence"),"PAF Configuration",0,16) | out-null
		Return
		}
	}
ElseIf ($radio_weekly.checked) {
	$setting = "weekly"
	If ($recur_number_weekly.text) { $s_recure_number = $recur_number_weekly.text}
	Else {
		[System.Windows.Forms.MessageBox]::Show(("Recurrence is empty. Please set up the recurrence"),"PAF Configuration",0,16) | out-null
		Return
		}
	If ($check_sunday.checked){ $weekly_days += "Sunday" }
	If ($check_monday.checked){ $weekly_days += "Monday" }
	If ($check_tuesday.checked){ $weekly_days += "Tuesday" }
	If ($check_wednesday.checked){ $weekly_days += "Wednesday" }
	If ($check_thursday.checked){ $weekly_days += "Thursday" }
	If ($check_friday.checked){ $weekly_days += "Friday" }
	If ($check_saturday.checked){ $weekly_days += "Saturday" }
	If (!$weekly_days) { 
		[System.Windows.Forms.MessageBox]::Show(("No days of the week were selected. Please select at least one day"),"PAF Configuration",0,16) | out-null
		Return
		}
	}
ElseIf ($radio_monthly.checked){
	$setting = "monthly"
	}

If ($text_ps_path.text) { $s_text_ps_path = $text_ps_path.Text }
Else{
	[System.Windows.Forms.MessageBox]::Show(("PowerShell script in not selected. Please PowerShell script to schedule"),"PAF Configuration",0,16) | out-null
	Return
	}

$WorkingDir = $(Split-Path -path $s_text_ps_path) + "\"
If ($setting -eq "onetime" ) { $trigger = New-ScheduledTaskTrigger -Once -At $([DateTime]::ParseExact($s_combo_date_time, 'dd/MM/yyyy HH:mm:ss', $culture)) }
ElseIf ($setting -eq "daily") { $trigger = New-ScheduledTaskTrigger -Daily -At $s_combo_time -DaysInterval $s_recure_number }
ElseIf ($setting -eq "weekly") { $trigger = New-ScheduledTaskTrigger -Weekly -DaysOfWeek $weekly_days -At $s_combo_time -WeeksInterval $s_recure_number }

If (!$use_system.Checked) {
	$Credentials = Get-Credential -Message "Please specify scheduled task user account to run the script"
	$SCH_Username = $Credentials.GetNetworkCredential().UserName
	$SCH_Password = $Credentials.GetNetworkCredential().Password
	}
Else {
	$SCH_Username = "NT AUTHORITY\SYSTEM"
	$SCH_Password = ""
	}

Try {
	If ($SCH_Username) {
		If (!$text_description.Text) {$text_description.Text = " "}
		$Schedule = New-Object -ComObject "Schedule.Service"
		$Schedule.Connect()
		If ($setting -eq "monthly") {
			If ($check_month.Text -match "All") { $Months1 = "JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC" }
			Else {
				$Months1 = @()
				$check_month.Text -split ", " | % {$Months1 += $_.substring(0,3).ToUpper()}
				$Months1 = $Months1 -join ","
				}
			$Task = "PAF\" + $s_text_name
			$taskParams = @("/Create",
				"/TN", $Task, 
				"/SC", "monthly", 
				"/D", 1,
				"/M", $Months1,
				"/ST", $TimePicker.text, 
				"/TR", "powershell.exe", 
				"/RU", $SCH_Username);
			If ($SCH_Password) { $taskParams.Add("Password", $SCH_Password) }
			schtasks.exe @taskParams
			$Folder = $Schedule.GetFolder('\PAF')
			$Task = $Folder.GetTask($s_text_name)
			$Definition = $task.Definition
			$Definition.Actions | ForEach-Object { $_.Arguments = "-executionpolicy bypass -file ""$s_text_ps_path"""; $_.WorkingDirectory = $WorkingDir }
			$Definition.RegistrationInfo | ForEach-Object { $_.Description = $text_description.Text }
			$Principal = $Definition.Principal
			# Principal.RunLevel -- 0 is least privilege, 1 is highest privilege #
			$Principal.RunLevel = 1
			If (!$SCH_Password) { $SCH_Password = $null } 
			$Folder.RegisterTaskDefinition($Task.Name, $Definition, 4, $SCH_Username, $SCH_Password, $null)
			}
		Else {
			$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-executionpolicy bypass -file ""$s_text_ps_path""" -WorkingDirectory $WorkingDir
			
			$Arguments = @{
				Action = $action
				Description = $text_description.text
				Trigger = $trigger
				User = $SCH_Username
				RunLevel = "Highest"
				TaskPath = "PAF"
				}
			If ($SCH_Password) { $Arguments.Add("Password", $SCH_Password) }
			#Register-ScheduledTask $s_text_name -Action $action -Trigger $trigger -User $SCH_Username -Password $SCH_Password -Description $text_description.text -RunLevel Highest
			$rootFolder = $Schedule.GetFolder("\")
			Try {$null = $Schedule.GetFolder("PAF")}
			Catch { $null = $rootFolder.CreateFolder("PAF") }
			
			Register-ScheduledTask $s_text_name @Arguments
			}
		[System.Windows.Forms.MessageBox]::Show(("Scheduled task was successfully created"),"PAF Configuration",0,0) | out-null
		}
	Else { [System.Windows.Forms.MessageBox]::Show(("No credentials were provided. Please provide a proper credentials"),"PAF Configuration",0,16) | out-null }
	}
Catch { [System.Windows.Forms.MessageBox]::Show(("Something went wrong during scheduled task creation. Please verify all settings and try again"),"PAF Configuration",0,16) | out-null }
}

Function PAFConfig-About {
$AboutForm = New-Object system.Windows.Forms.Form
$AboutForm.ClientSize = '380,220'
$AboutForm.Text = "About"
$AboutForm.Icon  = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$AboutForm.TopMost = $true
$AboutForm.FormBorderStyle = "FixedSingle"
$AboutForm.MaximizeBox = $false
$AboutForm.StartPosition = "centerscreen"

$pictureBox = new-object Windows.Forms.PictureBox
$pictureBox.Width = 240
$pictureBox.Height = 80 
$pictureBox.Location = New-Object System.Drawing.Size(70,20) 
$pictureBox.Image = [System.Convert]::FromBase64String($LogoImg)
$AboutForm.Controls.Add($pictureBox)



$Label = New-Object system.Windows.Forms.Label
$Label.Text = "PowerShell Automation Framework configurator`nVersion 1.0.0`n $([char]0x00A9) Copyright 2020, Aleksandr Dyakonov. All rights reserved."
#$Label.AutoSize = $true
$Label.Width = 360
$Label.Height = 70
$Label.Location = New-Object System.Drawing.Point(0,110)
$label.TextAlign = 'MiddleCenter'
$AboutForm.Controls.Add($Label)

$OKButton = New-Object system.Windows.Forms.Button
$OKButton.Text = "Ok"
$OKButton.Width = 80
$OKButton.Height = 20
$OKButton.Location = New-Object System.Drawing.Point(150,180)
$OKButton.Add_Click({ $AboutForm.Close() })
$AboutForm.Controls.Add($OKButton)

$AboutForm.ShowDialog() | out-null 


}

Function PAFConfig-Help {
[System.Windows.Forms.MessageBox]::Show("Yet not ready! Add CHM file here!")
}

Function PAFConfig-LoadThumbprint {
$Thumbprint = Get-Content "ssl.thumb"  -ea "SilentlyContinue"
If (!$Thumbprint -or !(Get-ChildItem -Path Cert:\LocalMachine\My | ? {$_.Thumbprint -eq $Thumbprint})) {
	"" | Out-File $($PSScriptRoot + "\ssl.thumb") -Force; 
	[System.Windows.Forms.MessageBox]::Show("Please select SSL certificate to encrypt/decrypt data to continue","PAF Configuration") | out-null
	PAFConfig-ManageSSLForm
	If (!$global:SSLThumbprint) {
		$Thumbprint = "not_selected"
		[System.Windows.Forms.MessageBox]::Show(("SSL certificate is not selected! Configurations cannot be opened or saved!"),"PAF Configuration",0,48) | out-null
		}
	}
Else {
	$FileMenu_New.Enabled = $true
	$FileMenu_Open.Enabled = $true
	$FileMenu_Save.Enabled = $true
	$FileMenu_SaveAs.Enabled = $true
	$NewEnv.Enabled = $true
	$OpenEnv.Enabled = $true
	$EditEnv.Enabled = $true
	$SelectedKeyPath.Text = "SSL Thumbprint: $Thumbprint"
	$SelectedKeyPath.ForeColor = "black"
	}
Return $Thumbprint
}

Function PAFConfig-FormUpdated { $global:ConfFormUpdated = $true }

#####New SSL certificate form here
Function PAFConfig-NewCertificateForm {
$SSLCertPath = ""

$NewSLLForm = New-Object System.Windows.Forms.Form
$NewSLLForm.Text = "Create and import new SSL certificate"
$NewSLLForm.FormBorderStyle = "FixedSingle"
$NewSLLForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$NewSLLForm.MaximizeBox = $false
$NewSLLForm.StartPosition = "centerscreen"
$NewSLLForm.TopMost = $false
$NewSLLForm.AutoSize = $true
$NewSLLForm.KeyPreview = $true;
$NewSLLForm.ClientSize = "570,210"

#Set vertical offset
$h = 20
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSL certificate friendly name"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewSLLForm.Controls.Add($Label)

$SSLCertName = New-Object system.Windows.Forms.TextBox
$SSLCertName.multiline = $false
$SSLCertName.Width = 240
$SSLCertName.Height = 20
$SSLCertName.Text = ""
$SSLCertName.Location = New-Object System.Drawing.Point(200,$h1)
$NewSLLForm.Controls.Add($SSLCertName)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSL certificate file name"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewSLLForm.Controls.Add($Label)

$SSLCertFileName = New-Object system.Windows.Forms.TextBox
$SSLCertFileName.multiline = $false
$SSLCertFileName.Width = 240
$SSLCertFileName.Height = 20
$SSLCertFileName.Text = ""
$SSLCertFileName.Location = New-Object System.Drawing.Point(200,$h1)
$NewSLLForm.Controls.Add($SSLCertFileName)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSL certificate location"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewSLLForm.Controls.Add($Label)

$SSLCertLocation = New-Object system.Windows.Forms.TextBox
$SSLCertLocation.multiline = $false
$SSLCertLocation.Width = 240
$SSLCertLocation.Height = 20
$SSLCertLocation.Text = ""
$SSLCertLocation.Location = New-Object System.Drawing.Point(200,$h1)
$NewSLLForm.Controls.Add($SSLCertLocation)

$BrowseSSLCert = New-Object system.Windows.Forms.Button
$BrowseSSLCert.Text = "Browse"
$BrowseSSLCert.Width = 80
$BrowseSSLCert.Height = 20
$BrowseSSLCert.Location = New-Object System.Drawing.Point(460,$h1)
$BrowseSSLCert.Add_Click({ Open-Folder-Dialog -Textbox $SSLCertLocation })
$NewSLLForm.Controls.Add($BrowseSSLCert)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSL certificate private key"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewSLLForm.Controls.Add($Label)

$SSLCertPassword = New-Object system.Windows.Forms.MaskedTextBox
$SSLCertPassword.multiline = $false
$SSLCertPassword.Width = 340
$SSLCertPassword.Height = 20
$SSLCertPassword.PasswordChar = '*'
$SSLCertPassword.Location = New-Object System.Drawing.Point(200,$h1)
$NewSLLForm.Controls.Add($SSLCertPassword)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Confirm SSL certificate private key"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewSLLForm.Controls.Add($Label)

$SSLCertPasswordConfirm = New-Object system.Windows.Forms.MaskedTextBox
$SSLCertPasswordConfirm.multiline = $false
$SSLCertPasswordConfirm.Width = 340
$SSLCertPasswordConfirm.Height = 20
$SSLCertPasswordConfirm.PasswordChar = '*'
$SSLCertPasswordConfirm.Location = New-Object System.Drawing.Point(200,$h1)
$NewSLLForm.Controls.Add($SSLCertPasswordConfirm)

#Set vertical offset
$h += 30
$ImportSLLForm_btn_ok = New-Object system.Windows.Forms.Button
$ImportSLLForm_btn_ok.Text = "Import"
$ImportSLLForm_btn_ok.Width = 100
$ImportSLLForm_btn_ok.Height = 30
$ImportSLLForm_btn_ok.Location = New-Object System.Drawing.Point(340,$h)
$ImportSLLForm_btn_ok.Add_Click({ PAFConfig-NewCertificate })
$NewSLLForm.Controls.Add($ImportSLLForm_btn_ok)

$ImportSLLForm_btn_cancel = New-Object system.Windows.Forms.Button
$ImportSLLForm_btn_cancel.Text = "Cancel"
$ImportSLLForm_btn_cancel.Width = 100
$ImportSLLForm_btn_cancel.Height = 30
$ImportSLLForm_btn_cancel.Location = New-Object System.Drawing.Point(460,$h)
$ImportSLLForm_btn_cancel.Add_Click({ $NewSLLForm.Close() })
$NewSLLForm.Controls.Add($ImportSLLForm_btn_cancel)


For ($i = 15; $i -le 135; $i = $i + 30) {
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(185,$i)
$NewSLLForm.Controls.Add($Label)
}

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,185)
$NewSLLForm.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Mandatory fields"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,185)
$NewSLLForm.Controls.Add($Label)

[void]$NewSLLForm.ShowDialog()
}

Function PAFConfig-NewCertificate {
If ($SSLCertPassword.Text -eq $SSLCertPasswordConfirm.Text) {
	$privateKeyPath = $SSLCertLocation.Text + "\" + $SSLCertFileName.Text + ".pfx"
	$password  = ConvertTo-SecureString $SSLCertPassword.Text -AsPlainText -Force
	
	$CertSettings = @{
	Subject = "CN=Powershell Automation Framework Encryption certificate"
	NotAfter = (Get-Date).AddYears(100)
	EKU = "Document Encryption"
	KeySpec = "Signature"
	KeyUsage = "KeyEncipherment,DataEncipherment,KeyAgreement"
	FriendlyName = $SSLCertName.Text
	Path = $privateKeyPath
	Password = $password
	Exportable = $true
	AllowSMIME = $true
	}
New-SelfsignedCertificateEx @CertSettings | out-null
	
	Sleep 1
	PAFConfig-ImportCertificate -Path $privateKeyPath -Password $SSLCertPassword.Text
	[System.Windows.Forms.MessageBox]::Show("Please write down SSL private key to use it on different server","PAF Configuration") | out-null
	$NewSLLForm.Close()
	}
Else {
	[System.Windows.Forms.MessageBox]::Show("Entered SSL keys do not match!","PAF Configuration",0,16) | out-null
	}
}

#####Import SSL certificate form here
Function PAFConfig-ImportCertificateForm {
$SSLCertPath = ""

$ImportSLLForm = New-Object System.Windows.Forms.Form
$ImportSLLForm.Text = "Import existing SSL certificate"
$ImportSLLForm.FormBorderStyle = "FixedSingle"
$ImportSLLForm.MaximizeBox = $false
$ImportSLLForm.StartPosition = "centerscreen"
$ImportSLLForm.TopMost = $false
$ImportSLLForm.AutoSize = $true
$ImportSLLForm.KeyPreview = $true;
$ImportSLLForm.ClientSize = "570,120"

#Set vertical offset
$h = 20
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSL certificate location"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$ImportSLLForm.Controls.Add($Label)

$SSLCertLocation = New-Object system.Windows.Forms.TextBox
$SSLCertLocation.multiline = $false
$SSLCertLocation.Width = 290
$SSLCertLocation.Height = 20
$SSLCertLocation.Text = ""
$SSLCertLocation.Location = New-Object System.Drawing.Point(150,$h1)
$ImportSLLForm.Controls.Add($SSLCertLocation)

$BrowseSSLCert = New-Object system.Windows.Forms.Button
$BrowseSSLCert.Text = "Browse"
$BrowseSSLCert.Width = 80
$BrowseSSLCert.Height = 20
$BrowseSSLCert.Location = New-Object System.Drawing.Point(460,$h1)
$BrowseSSLCert.Add_Click({ $SSLCertPath = Open-File-Dialog -FileFilter "Personal Information Exchange|*.pfx" -Title "Select SSL certificate"; If ($SSLCertPath) { $SSLCertLocation.Text = $SSLCertPath } })
$ImportSLLForm.Controls.Add($BrowseSSLCert)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSL certificate private key"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$ImportSLLForm.Controls.Add($Label)

$SSLCertPassword = New-Object system.Windows.Forms.MaskedTextBox
$SSLCertPassword.multiline = $false
$SSLCertPassword.Width = 390
$SSLCertPassword.Height = 20
$SSLCertPassword.PasswordChar = '*'
$SSLCertPassword.Location = New-Object System.Drawing.Point(150,$h1)
$ImportSLLForm.Controls.Add($SSLCertPassword)

#Set vertical offset
$h += 30
$ImportSLLForm_btn_ok = New-Object system.Windows.Forms.Button
$ImportSLLForm_btn_ok.Text = "Import"
$ImportSLLForm_btn_ok.Width = 100
$ImportSLLForm_btn_ok.Height = 30
$ImportSLLForm_btn_ok.Location = New-Object System.Drawing.Point(340,$h)
$ImportSLLForm_btn_ok.Add_Click({ PAFConfig-ImportCertificate -Path $SSLCertLocation.Text -Password $SSLCertPassword.Text; $ImportSLLForm.Close() })
$ImportSLLForm.Controls.Add($ImportSLLForm_btn_ok)

$ImportSLLForm_btn_cancel = New-Object system.Windows.Forms.Button
$ImportSLLForm_btn_cancel.Text = "Cancel"
$ImportSLLForm_btn_cancel.Width = 100
$ImportSLLForm_btn_cancel.Height = 30
$ImportSLLForm_btn_cancel.Location = New-Object System.Drawing.Point(460,$h)
$ImportSLLForm_btn_cancel.Add_Click({ $ImportSLLForm.Close() })
$ImportSLLForm.Controls.Add($ImportSLLForm_btn_cancel)

For ($i = 15; $i -le 45; $i = $i + 30) {
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(135,$i)
$ImportSLLForm.Controls.Add($Label)
}

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,95)
$ImportSLLForm.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Mandatory fields"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,95)
$ImportSLLForm.Controls.Add($Label)

[void]$ImportSLLForm.ShowDialog()
}

Function PAFConfig-ImportCertificate {
	param (
		[Parameter(Mandatory=$true)][string] $Path,
		[Parameter(Mandatory=$true)] $Password
		)
If ($Path -and $Password -ne $null) {
	$certStore = 'Cert:\LocalMachine\My'
	$SecurePassword  = ConvertTo-SecureString $Password -AsPlainText -Force
	
	
	$Cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
	Try { $Cert.Import($Path,$Password,'DefaultKeySet') }
	Catch {
		[System.Windows.Forms.MessageBox]::Show("Error importing SSL certificate","PAF Configuration",0,16) | out-null
		Return
		}
	
	If ($Cert.EnhancedKeyUsageList.FriendlyName -contains "Document Encryption") {
		certutil -p $Password -importPFX -csp "Microsoft Enhanced RSA and AES Cryptographic Provider" -v $Path AT_KEYEXCHANGE,NoProtect | out-null
		#Import-PfxCertificate -FilePath $Path -CertStoreLocation $certStore -Password $SecurePassword
		PAFConfig-ManageSSLForm_GridView_Refresh
		}
	Else { [System.Windows.Forms.MessageBox]::Show("Selected certificate cannot be used to encrypt PAF data","PAF Configuration",0,16) | out-null }	
	}
}

#####SSL management form here
Function PAFConfig-ManageSSLForm {
#Load PSPKI Module
If (-Not (Get-Module).Name.Contains("PSPKI-lite")) { Import-Module $($PSScriptRoot + "\Modules\PSPKI\PSPKI-lite.psm1") -ea "Stop" -WarningAction SilentlyContinue}

$global:SSLCertList = @()
ForEach ($cert in (Get-Item -Path "Cert:\LocalMachine\My\*") | ? { $_.EnhancedKeyUsageList.FriendlyName -contains "Document Encryption"} | Select FriendlyName,Thumbprint) {
	$global:SSLCertList += $cert
	}
#$global:SSLCertList = (Get-Item -Path "Cert:\LocalMachine\My\*") | Select FriendlyName,Thumbprint

$SSLSelectForm = New-Object System.Windows.Forms.Form
$SSLSelectForm.Text = "SSL certificate management"
$SSLSelectForm.FormBorderStyle = "FixedSingle"
$SSLSelectForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$SSLSelectForm.MaximizeBox = $false
$SSLSelectForm.StartPosition = "centerscreen"
$SSLSelectForm.TopMost = $false
$SSLSelectForm.AutoSize = $true
$SSLSelectForm.KeyPreview = $true;
$SSLSelectForm.ClientSize = '570,335'

$SSLSelectForm_GridView = New-Object system.Windows.Forms.DataGridView
$SSLSelectForm_GridView.width = 570
$SSLSelectForm_GridView.height = 245
$SSLSelectForm_GridView.ColumnCount = 2
$SSLSelectForm_GridView.AutoSizeColumnsMode = 'fill'
$SSLSelectForm_GridView.ColumnHeadersVisible = $true
$SSLSelectForm_GridView.SelectionMode = 'FullRowSelect'
$SSLSelectForm_GridView.ReadOnly = $true
$SSLSelectForm_GridView.Columns[0].Name = "Friendly name"
$SSLSelectForm_GridView.Columns[0].Width = 180 
$SSLSelectForm_GridView.Columns[1].Name = "Thumbprint"
ForEach ($row in $global:SSLCertList){ $SSLSelectForm_GridView.Rows.Add($row.FriendlyName,$row.Thumbprint) | out-null }
If ($global:SSLCertList.count -lt 10) { $global:SSLCertList.count..8 | % { $SSLSelectForm_GridView.Rows.Add("","") | out-null } }
$SSLSelectForm_GridView.Add_SelectionChanged({ PAFConfig-ManageSSLForm_GridView_SelectionChanged })
$SSLSelectForm.Controls.Add($SSLSelectForm_GridView)

#Set vertical offset
$h = 255
$SSLSelectForm_btn_new = New-Object system.Windows.Forms.Button
$SSLSelectForm_btn_new.Text = "Create"
$SSLSelectForm_btn_new.Width = 100
$SSLSelectForm_btn_new.Height = 30
$SSLSelectForm_btn_new.Location = New-Object System.Drawing.Point(20,$h)
$SSLSelectForm_btn_new.Add_Click({ PAFConfig-NewCertificateForm })
$SSLSelectForm.Controls.Add($SSLSelectForm_btn_new)

$SSLSelectForm_btn_import = New-Object system.Windows.Forms.Button
$SSLSelectForm_btn_import.Text = "Import"
$SSLSelectForm_btn_import.Width = 100
$SSLSelectForm_btn_import.Height = 30
$SSLSelectForm_btn_import.Location = New-Object System.Drawing.Point(140,$h)
$SSLSelectForm_btn_import.Add_Click({ PAFConfig-ImportCertificateForm })
$SSLSelectForm.Controls.Add($SSLSelectForm_btn_import)

$SSLSelectForm_btn_delete = New-Object system.Windows.Forms.Button
$SSLSelectForm_btn_delete.Text = "Delete"
$SSLSelectForm_btn_delete.Width = 100
$SSLSelectForm_btn_delete.Height = 30
$SSLSelectForm_btn_delete.Location = New-Object System.Drawing.Point(260,$h)
$SSLSelectForm_btn_delete.Add_Click({ PAFConfig-ManageSSLForm_DeleteCertificate })
$SSLSelectForm.Controls.Add($SSLSelectForm_btn_delete)

$h += 40
$SSLSelectForm_btn_ok = New-Object system.Windows.Forms.Button
$SSLSelectForm_btn_ok.Text = "Select"
$SSLSelectForm_btn_ok.Width = 100
$SSLSelectForm_btn_ok.Height = 30
$SSLSelectForm_btn_ok.Location = New-Object System.Drawing.Point(340,$h)
$SSLSelectForm_btn_ok.Add_Click({ PAFConfig-ManageSSLForm_SelectCertificate; $SSLSelectForm.Close() })
$SSLSelectForm.Controls.Add($SSLSelectForm_btn_ok)

$SSLSelectForm_btn_cancel = New-Object system.Windows.Forms.Button
$SSLSelectForm_btn_cancel.Text = "Close"
$SSLSelectForm_btn_cancel.Width = 100
$SSLSelectForm_btn_cancel.Height = 30
$SSLSelectForm_btn_cancel.Location = New-Object System.Drawing.Point(460,$h)
$SSLSelectForm_btn_cancel.Add_Click({ $global:SSLThumbprint= ""; $SSLSelectForm.Close() })
$SSLSelectForm.Controls.Add($SSLSelectForm_btn_cancel)

[void]$SSLSelectForm.ShowDialog()

}

Function PAFConfig-ManageSSLForm_SelectCertificate {
$global:SSLThumbprint =  $global:SSLThumbprint_Selected
$global:SSLThumbprint | Out-File $($PSScriptRoot + "\ssl.thumb") -Force; 
$SelectedKeyPath.ForeColor = "black"
$SelectedKeyPath.Text = "SSL Thumbprint: $($global:SSLThumbprint)"
$FileMenu_New.Enabled = $true
$FileMenu_Open.Enabled = $true
$FileMenu_Save.Enabled = $true
$FileMenu_SaveAs.Enabled = $true
$NewEnv.Enabled = $true
$OpenEnv.Enabled = $true
$EditEnv.Enabled = $true
}

Function PAFConfig-ManageSSLForm_DeleteCertificate {
If ([System.Windows.Forms.MessageBox]::Show(("Are you sure you want to delete selected SSL certificate?"),"PAF Configuration",4,48) -eq "Yes") { 
	Get-ChildItem $("Cert:\LocalMachine\My\" + $global:SSLThumbprint_Selected) | Remove-Item
	PAFConfig-ManageSSLForm_GridView_Refresh
	}
}

Function PAFConfig-ManageSSLForm_GridView_Refresh {
Sleep 1
$SSLSelectForm_GridView.Rows.Clear()
$SSLSelectForm_GridView.Refresh()
$global:SSLCertList = @()
ForEach ($cert in (Get-Item -Path "Cert:\LocalMachine\My\*") | ? { $_.EnhancedKeyUsageList.FriendlyName -contains "Document Encryption"} | Select FriendlyName,Thumbprint) { $global:SSLCertList += $cert }

ForEach ($row in $global:SSLCertList){ $SSLSelectForm_GridView.Rows.Add($row.FriendlyName,$row.Thumbprint) | out-null }
If ($global:SSLCertList.count -lt 10) { $global:SSLCertList.count..8 | % { $SSLSelectForm_GridView.Rows.Add("","") | out-null } }
$SSLSelectForm_GridView.Refresh()
}

Function PAFConfig-ManageSSLForm_GridView_SelectionChanged {
If ($global:SSLCertList) {
	If ($SSLSelectForm_GridView.CurrentCell.RowIndex -gt $($global:SSLCertList.count - 1) ) {
		$SSLSelectForm_GridView.Rows[$SSLSelectForm_GridView.CurrentCell.RowIndex].Selected = $false
		$SSLSelectForm_GridView.Rows[$global:RowIndex].Selected = $true
		$SSLSelectForm_btn_ok.Enabled = $false
		$SSLSelectForm_btn_delete.Enabled = $false
		}
	Else {
		$global:RowIndex = $SSLSelectForm_GridView.CurrentCell.RowIndex
		$SSLSelectForm_btn_ok.Enabled = $true
		$SSLSelectForm_btn_delete.Enabled = $true
		$global:SSLThumbprint_Selected =  $SSLSelectForm_GridView.Rows[$global:RowIndex].Cells[1].value
		}
	
	If ($global:SSLCertList.count -eq 1) {
		$global:RowIndex = 0
		$SSLSelectForm_btn_ok.Enabled = $true
		$SSLSelectForm_btn_delete.Enabled = $true
		$global:SSLThumbprint_Selected =  $SSLSelectForm_GridView.Rows[$global:RowIndex].Cells[1].value
	}
}
Else {
	$SSLSelectForm_GridView.ClearSelection()
	$SSLSelectForm_btn_ok.Enabled = $false
	$SSLSelectForm_btn_delete.Enabled = $false
}
	
}

#####New automation script form here
Function PAFConfig-NewPAFScriptForm {
$NewPAFForm = New-Object System.Windows.Forms.Form
$NewPAFForm.Text = "New automation script template"
$NewPAFForm.FormBorderStyle = "FixedSingle"
$NewPAFForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$NewPAFForm.MaximizeBox = $false
$NewPAFForm.StartPosition = "centerscreen"
$NewPAFForm.TopMost = $false
$NewPAFForm.AutoSize = $true
$NewPAFForm.KeyPreview = $true;
$NewPAFForm.ClientSize = '570,150'

#Set vertical offset
$h = 20
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Specify PowerShell script name"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewPAFForm.Controls.Add($Label)

$PAFName = New-Object system.Windows.Forms.TextBox
$PAFName.multiline = $false
$PAFName.Width = 240
$PAFName.Height = 20
$PAFName.Text = ""
$PAFName.Location = New-Object System.Drawing.Point(200,$h1)
$NewPAFForm.Controls.Add($PAFName)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Specify  script folder"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewPAFForm.Controls.Add($Label)

$PAFFolder = New-Object system.Windows.Forms.TextBox
$PAFFolder.multiline = $false
$PAFFolder.Width = 240
$PAFFolder.Height = 20
$PAFFolder.Text = ""
$PAFFolder.Location = New-Object System.Drawing.Point(200,$h1)
$NewPAFForm.Controls.Add($PAFFolder)

$BrowsePAFFolder = New-Object system.Windows.Forms.Button
$BrowsePAFFolder.Text = "Browse"
$BrowsePAFFolder.Width = 80
$BrowsePAFFolder.Height = 20
$BrowsePAFFolder.Location = New-Object System.Drawing.Point(460,$h1)
$BrowsePAFFolder.Add_Click({ Open-Folder-Dialog -Textbox $PAFFolder })
$NewPAFForm.Controls.Add($BrowsePAFFolder)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Copy current configuration"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$NewPAFForm.Controls.Add($Label)

$NewPAFFormCopyConfig = New-Object system.Windows.Forms.CheckBox
$NewPAFFormCopyConfig.AutoSize = $true
$NewPAFFormCopyConfig.Location = New-Object System.Drawing.Point(200,$h1)
$NewPAFForm.Controls.Add($NewPAFFormCopyConfig)

#Set vertical offset
$h += 30
$NewPAFForm_btn_ok = New-Object system.Windows.Forms.Button
$NewPAFForm_btn_ok.Text = "Create"
$NewPAFForm_btn_ok.Width = 100
$NewPAFForm_btn_ok.Height = 30
$NewPAFForm_btn_ok.Location = New-Object System.Drawing.Point(340,$h)
$NewPAFForm_btn_ok.Add_Click({ PAFConfig-NewPAFScript -FileName $($PAFFolder.Text + "\" + $PAFName.Text) -CopyConfig $NewPAFFormCopyConfig.Checked })
$NewPAFForm.Controls.Add($NewPAFForm_btn_ok)

$NewPAFForm_btn_cancel = New-Object system.Windows.Forms.Button
$NewPAFForm_btn_cancel.Text = "Close"
$NewPAFForm_btn_cancel.Width = 100
$NewPAFForm_btn_cancel.Height = 30
$NewPAFForm_btn_cancel.Location = New-Object System.Drawing.Point(460,$h)
$NewPAFForm_btn_cancel.Add_Click({ $NewPAFForm.Close() })
$NewPAFForm.Controls.Add($NewPAFForm_btn_cancel)

For ($i = 15; $i -le 45; $i = $i + 30) {
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(185,$i)
$NewPAFForm.Controls.Add($Label)
}

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,125)
$NewPAFForm.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Mandatory fields"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(20,125)
$NewPAFForm.Controls.Add($Label)

[void]$NewPAFForm.ShowDialog()
}

Function PAFConfig-NewPAFScript {
	param (
		[Parameter(Mandatory=$true)][string] $FileName,
		[Parameter(Mandatory=$true)][bool] $CopyConfig
		)
$Path = Split-Path -Path $FileName
If(!(Test-Path $Path)) { New-Item -ItemType Directory -Force -Path $Path | out-null }
$Content = '##############Load core functions##############
$global:PAFScriptPath = $PSScriptRoot
Import-Module "$((Get-Item $global:PAFScriptPath).parent.FullName)\Modules\PAF\paf-core.psm1" -WarningAction SilentlyContinue

#Define script custom parameters
#Put you script variables here
$Content = @()

Write-host "Running script" -foregroundcolor "yellow"

#############
# Code Area #
#############

Write-host "Finishing..." -foregroundcolor "yellow"
#Export to file
PAF-SaveFile -Content $Content

#Send by email
PAF-SendEmail'

$Content | Out-File $FileName -Force
If ($CopyConfig) { Encrypt -Variable $global:Config | Set-Content -Path $($Path + "\config.pafc") }
Else {
	New-Item -Path $($Path + "\config.pafc") -ItemType file
	$empty_config = New-Object PSObject -Property @{envFileLocation =""; ReportLocation = ""; Customer = @{'CustomerName' = "";'ReportName' = ""; 'NameTemplate' = ""}; Mail = @{SendByEmail = ""; Transport = ""; 'e-mailTo' = ""; 'e-mailFrom' = ""; Subject = ""; BodyText = ""; vROHostName = ""; vROSMTPServer =""; vROSSHUser = ""; vROSSHPassword = ""; vROUser = ""; vROPassword = ""; SMTPServer = ""}; Properties = @{} }
	Encrypt -Variable $empty_config | Set-Content -Path $($Path + "\config.pafc")
	}

$PAFFolder.Text = ""
$PAFName.Text = ""
$NewPAFFormCopyConfig.Checked = $false
[System.Windows.Forms.MessageBox]::Show(("New automation script template created"),"PAF Configuration") | out-null
}

#####Style editor form here
Function PAFConfig-EditStyleForm {
$EditStyleForm = New-Object System.Windows.Forms.Form
$EditStyleForm.Text = "Edit style"
$EditStyleForm.FormBorderStyle = "FixedSingle"
$EditStyleForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$EditStyleForm.MaximizeBox = $false
$EditStyleForm.StartPosition = "centerscreen"
$EditStyleForm.TopMost = $false
$EditStyleForm.KeyPreview = $true;
$EditStyleForm.ClientSize = '236,300'

$isDefault = If (!$global:Config.Properties.style_html) { $true } Else { $false }

#Set vertical offset
$h = 20
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Use default style"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$EditStyleUseDefault = New-Object system.Windows.Forms.CheckBox
$EditStyleUseDefault.AutoSize = $true
$EditStyleUseDefault.Enabled = $true
$EditStyleUseDefault.Checked = $isDefault
$EditStyleUseDefault.Location = New-Object System.Drawing.Point(120,$h)
$EditStyleUseDefault.Add_CheckedChanged({ PAFConfig-EditStyleForm_CheckChanged })
$EditStyleForm.Controls.Add($EditStyleUseDefault)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Primary color"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$PrimaryColor = New-Object system.Windows.Forms.TextBox
$PrimaryColor.multiline = $false
$PrimaryColor.Enabled = $false
$PrimaryColor.Width = 65
$PrimaryColor.Height = 20
$PrimaryColor.Text = If (!$isDefault) { $global:Config.Properties.style_html.'MainColor' } Else { $global:PAFDefaultConfig.style_html.'MainColor' }
$PrimaryColor.Location = New-Object System.Drawing.Point(120,$h1)
$PrimaryColor.Add_TextChanged({ $PrimaryColor.Text = $($PrimaryColor.Text).ToUpper(); $Panel1.BackColor = $($PrimaryColor.Text).tostring() })
$EditStyleForm.Controls.Add($PrimaryColor)

$Panel1 = New-Object system.Windows.Forms.Panel
$Panel1.Width  = 16
$Panel1.Height = 16
$Panel1.BackColor = $PrimaryColor.Text
$Panel1.Enabled = $true
$Panel1.Location = New-Object System.Drawing.Point(205,$($h1 + 2))
$Panel1.Add_Click({ PAFConfig-EditStyleForm_PickColor -Object $PrimaryColor })
$EditStyleForm.Controls.Add($Panel1)

$PrimaryColorLookup = New-Object system.Windows.Forms.Button
$PrimaryColorLookup.Enabled = $false
$PrimaryColorLookup.Width = 26
$PrimaryColorLookup.Height = 26
$PrimaryColorLookup.Location = New-Object System.Drawing.Point(200,$($h1 - 3))
$PrimaryColorLookup.Add_Click({ PAFConfig-EditStyleForm_PickColor -Object $PrimaryColor })
$EditStyleForm.Controls.Add($PrimaryColorLookup)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Table odd row color"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$OddRowColor = New-Object system.Windows.Forms.TextBox
$OddRowColor.multiline = $false
$OddRowColor.Enabled = $false
$OddRowColor.Width = 65
$OddRowColor.Height = 20
$OddRowColor.Text = If (!$isDefault) { $global:Config.Properties.style_html.'tableRowOdd' } Else { $global:PAFDefaultConfig.style_html.'tableRowOdd' }
$OddRowColor.Location = New-Object System.Drawing.Point(120,$h1)
$OddRowColor.Add_TextChanged({ $OddRowColor.Text = $($OddRowColor.Text).ToUpper(); $Panel2.BackColor = $($OddRowColor.Text).tostring() })
$EditStyleForm.Controls.Add($OddRowColor)

$Panel2 = New-Object system.Windows.Forms.Panel
$Panel2.Width  = 16
$Panel2.Height = 16
$Panel2.BackColor = $OddRowColor.Text #$global:Config.Properties.style_html.'tableRowOdd'
$Panel2.Enabled = $false
$Panel2.Location = New-Object System.Drawing.Point(205,$($h1 + 2))
$Panel2.Add_Click({ PAFConfig-EditStyleForm_PickColor -Object $OddRowColor })
$EditStyleForm.Controls.Add($Panel2)

$OddRowColorLookup = New-Object system.Windows.Forms.Button
$OddRowColorLookup.Enabled = $false
$OddRowColorLookup.Width = 26
$OddRowColorLookup.Height = 26
$OddRowColorLookup.Location = New-Object System.Drawing.Point(200,$($h1 - 3))
$OddRowColorLookup.Add_Click({ PAFConfig-EditStyleForm_PickColor -Object $OddRowColor })
$EditStyleForm.Controls.Add($OddRowColorLookup)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Table even row color"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$EvenRowColor = New-Object system.Windows.Forms.TextBox
$EvenRowColor.multiline = $false
$EvenRowColor.Enabled = $false
$EvenRowColor.Width = 65
$EvenRowColor.Height = 20
$EvenRowColor.Text = If (!$isDefault) { $global:Config.Properties.style_html.'tableRowEven' } Else { $global:PAFDefaultConfig.style_html.'tableRowEven' }
$EvenRowColor.Location = New-Object System.Drawing.Point(120,$h1)
$EvenRowColor.Add_TextChanged({ $EvenRowColor.Text = $($EvenRowColor.Text).ToUpper(); $Panel3.BackColor = $($EvenRowColor.Text).tostring() })
$EditStyleForm.Controls.Add($EvenRowColor)

$Panel3 = New-Object system.Windows.Forms.Panel
$Panel3.Width  = 16
$Panel3.Height = 16
$Panel3.BackColor = $EvenRowColor.Text #$global:Config.Properties.style_html.'tableRowEven'
$Panel3.Enabled = $false
$Panel3.Location = New-Object System.Drawing.Point(205,$($h1 + 2))
$Panel3.Add_Click({ PAFConfig-EditStyleForm_PickColor -Object $EvenRowColor })
$EditStyleForm.Controls.Add($Panel3)

$EvenRowColorLookup = New-Object system.Windows.Forms.Button
$EvenRowColorLookup.Enabled = $false
$EvenRowColorLookup.Width = 26
$EvenRowColorLookup.Height = 26
$EvenRowColorLookup.Location = New-Object System.Drawing.Point(200,$($h1 - 3))
$EvenRowColorLookup.Add_Click({ PAFConfig-EditStyleForm_PickColor -Object $EvenRowColor })
$EditStyleForm.Controls.Add($EvenRowColorLookup)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "H1 text size"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$H1Size = New-Object system.Windows.Forms.TextBox
$H1Size.multiline = $false
$H1Size.Enabled = $false
$H1Size.Width = 65
$H1Size.Height = 20
$H1Size.Text = If (!$isDefault) { $global:Config.Properties.style_html.'h1' } Else { $global:PAFDefaultConfig.style_html.'h1' }
$H1Size.Location = New-Object System.Drawing.Point(120,$h1)
$EditStyleForm.Controls.Add($H1Size)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "H2 text size"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$H2Size = New-Object system.Windows.Forms.TextBox
$H2Size.multiline = $false
$H2Size.Enabled = $false
$H2Size.Width = 65
$H2Size.Height = 20
$H2Size.Text = If (!$isDefault) { $global:Config.Properties.style_html.'h2' } Else { $global:PAFDefaultConfig.style_html.'h2' }
$H2Size.Location = New-Object System.Drawing.Point(120,$h1)
$EditStyleForm.Controls.Add($H2Size)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "H3 text size"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$H3Size = New-Object system.Windows.Forms.TextBox
$H3Size.multiline = $false
$H3Size.Enabled = $false
$H3Size.Width = 65
$H3Size.Height = 20
$H3Size.Text = If (!$isDefault) { $global:Config.Properties.style_html.'h3' } Else { $global:PAFDefaultConfig.style_html.'h3' }
$H3Size.Location = New-Object System.Drawing.Point(120,$h1)
$EditStyleForm.Controls.Add($H3Size)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "H4 text size"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm.Controls.Add($Label)

$H4Size = New-Object system.Windows.Forms.TextBox
$H4Size.multiline = $false
$H4Size.Enabled = $false
$H4Size.Width = 65
$H4Size.Height = 20
$H4Size.Text = If (!$isDefault) { $global:Config.Properties.style_html.'h4' } Else { $global:PAFDefaultConfig.style_html.'h4' }
$H4Size.Location = New-Object System.Drawing.Point(120,$h1)
$EditStyleForm.Controls.Add($H4Size)

#Set vertical offset
$h += 30
$EditStyleForm_btn_ok = New-Object system.Windows.Forms.Button
$EditStyleForm_btn_ok.Text = "Ok"
$EditStyleForm_btn_ok.Width = 100
$EditStyleForm_btn_ok.Height = 30
$EditStyleForm_btn_ok.Location = New-Object System.Drawing.Point(10,$h)
$EditStyleForm_btn_ok.Add_Click({ PAFConfig-EditStyleForm_Save })
$EditStyleForm.Controls.Add($EditStyleForm_btn_ok)

$EditStyleForm_btn_cancel = New-Object system.Windows.Forms.Button
$EditStyleForm_btn_cancel.Text = "Cancel"
$EditStyleForm_btn_cancel.Width = 100
$EditStyleForm_btn_cancel.Height = 30
$EditStyleForm_btn_cancel.Location = New-Object System.Drawing.Point(126,$h)
$EditStyleForm_btn_cancel.Add_Click({ $EditStyleForm.Close() })
$EditStyleForm.Controls.Add($EditStyleForm_btn_cancel)

PAFConfig-EditStyleForm_CheckChanged
[void]$EditStyleForm.ShowDialog()
}

Function PAFConfig-EditStyleForm_PickColor {
	param ( [Parameter(Mandatory=$true)] $Object )
$colorDialog = new-object System.Windows.Forms.ColorDialog
$colorDialog.AllowFullOpen = $true
$colorDialog.Color = $Object.Text
$colorDialog.ShowDialog()
$Object.Text = "#$('{0:X2}' -f $colordialog.color.R)$('{0:X2}' -f $colordialog.color.G)$('{0:X2}' -f $colordialog.color.B)"
}

Function PAFConfig-EditStyleForm_CheckChanged {
If ($EditStyleUseDefault.Checked) {
	$PrimaryColor.Enabled = $false
	$Panel1.Enabled = $false
	$PrimaryColorLookup.Enabled = $false
	$OddRowColor.Enabled = $false
	$Panel2.Enabled = $false
	$OddRowColorLookup.Enabled = $false
	$EvenRowColor.Enabled = $false
	$Panel3.Enabled = $false
	$EvenRowColorLookup.Enabled = $false
	$H1Size.Enabled = $false
	$H2Size.Enabled = $false
	$H3Size.Enabled = $false
	$H4Size.Enabled = $false
	}
Else {
	$PrimaryColor.Enabled = $true
	$Panel1.Enabled = $true
	$PrimaryColorLookup.Enabled = $true
	$OddRowColor.Enabled = $true
	$Panel2.Enabled = $true
	$OddRowColorLookup.Enabled = $true
	$EvenRowColor.Enabled = $true
	$Panel3.Enabled = $true
	$EvenRowColorLookup.Enabled = $true
	$H1Size.Enabled = $true
	$H2Size.Enabled = $true
	$H3Size.Enabled = $true
	$H4Size.Enabled = $true
	}
}

Function PAFConfig-EditStyleForm_Save {
If (!$EditStyleUseDefault.Checked) {
	$Settings = @{ 'MainColor' = $PrimaryColor.Text; 'tableRowEven' = $EvenRowColor.Text; 'tableRowOdd' = $OddRowColor.Text; 'h1' = $H1Size.Text; 'h2' = $H2Size.Text; 'h3' = $H3Size.Text; 'h4' = $H4Size.Text }
	If ($global:Config.Properties.style_html) { $global:Config.Properties.style_html = $Settings }
	Else { $global:Config.Properties | Add-Member noteproperty "style_html" -value $Settings }
	}
Else { $global:Config.Properties.PSObject.Properties.Remove('style_html') }
[System.Windows.Forms.MessageBox]::Show(("Style saved"),"PAF Configuration") | out-null

$EditStyleForm.Close() 
}

#####PS Modules form here
Function PAFConfig-EditModulesForm {
$EditModulesForm = New-Object System.Windows.Forms.Form
$EditModulesForm.Text = "Edit PS modules associations"
$EditModulesForm.FormBorderStyle = "FixedSingle"
$EditModulesForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$EditModulesForm.MaximizeBox = $false
$EditModulesForm.StartPosition = "centerscreen"
$EditModulesForm.TopMost = $false
$EditModulesForm.KeyPreview = $true;
$EditModulesForm.ClientSize = '580,335'

$EditModulesForm_GridView = New-Object system.Windows.Forms.DataGridView
$EditModulesForm_GridView.width = 580
$EditModulesForm_GridView.height = 285
$EditModulesForm_GridView.ColumnCount = 1
$EditModulesForm_GridView.AutoSizeColumnsMode = 'fill'
$EditModulesForm_GridView.ColumnHeadersVisible = $true
$EditModulesForm_GridView.SelectionMode = 'FullRowSelect'
$EditModulesForm_GridView.RowHeadersVisible = $false
$EditModulesForm_GridView.Columns[0].Name = "Path to PS module"
$EditModulesForm.Controls.Add($EditModulesForm_GridView)

ForEach ($Module in $global:Config.Properties.Modules) { $EditModulesForm_GridView.Rows.Add($Module.Path) | out-null }

#Set vertical offset
$h = 295
$EditModulesForm_btn_ok = New-Object system.Windows.Forms.Button
$EditModulesForm_btn_ok.Text = "Ok"
$EditModulesForm_btn_ok.Width = 100
$EditModulesForm_btn_ok.Height = 30
$EditModulesForm_btn_ok.Location = New-Object System.Drawing.Point(355,$h)
$EditModulesForm_btn_ok.Add_Click({ PAFConfig-EditModulesForm_Save })
$EditModulesForm.Controls.Add($EditModulesForm_btn_ok)

$EditModulesForm_btn_cancel = New-Object system.Windows.Forms.Button
$EditModulesForm_btn_cancel.Text = "Cancel"
$EditModulesForm_btn_cancel.Width = 100
$EditModulesForm_btn_cancel.Height = 30
$EditModulesForm_btn_cancel.Location = New-Object System.Drawing.Point(470,$h)
$EditModulesForm_btn_cancel.Add_Click({ $EditModulesForm.Close() })
$EditModulesForm.Controls.Add($EditModulesForm_btn_cancel)

[void]$EditModulesForm.ShowDialog()
}

Function PAFConfig-EditModulesForm_Save {
If ($global:Config.Properties.Modules) { $global:Config.Properties.Modules = @() }
Else { $global:Config.Properties | Add-Member noteproperty "Modules" -value @() }

ForEach ($Row in $EditModulesForm_GridView.Rows) {
	If ($Row.Cells[0].value) { $global:Config.Properties.Modules += @{'Path' = $Row.Cells[0].value} } 
	}
[System.Windows.Forms.MessageBox]::Show(("Modules configuration saved"),"PAF Configuration") | out-null
$EditModulesForm.Close() 
}

#####CI Properties form here
Function PAFConfig-CIProperties {
$CIPropertiesForm = New-Object System.Windows.Forms.Form
$CIPropertiesForm.Text = "CI Properties configuration"
$CIPropertiesForm.FormBorderStyle = "FixedSingle"
$CIPropertiesForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$CIPropertiesForm.MaximizeBox = $false
$CIPropertiesForm.StartPosition = "centerscreen"
$CIPropertiesForm.TopMost = $false
$CIPropertiesForm.KeyPreview = $true;
$CIPropertiesForm.ClientSize = '340,405'
$CIPropertiesForm.Add_FormClosing({ $global:PAFDefaultConfig = Get-Content -Path "$PSScriptRoot\defaults.pafp" | ConvertFrom-Json  })

###############################################
$DescriptionLabel = New-Object system.Windows.Forms.Label
$DescriptionLabel.Name = "DescriptionLabel" 
$DescriptionLabel.Location = New-Object System.Drawing.Size(10,20)
$DescriptionLabel.AutoSize = $true
$DescriptionLabel.Text = "Description"
$CIPropertiesForm.Controls.Add($DescriptionLabel)

$DescriptionTextBox = New-Object system.Windows.Forms.TextBox
$DescriptionTextBox.Location = New-Object System.Drawing.Size(100,20)
$DescriptionTextBox.Width = 225
$DescriptionTextBox.Height = 20
$DescriptionTextBox.Name = "DescriptionTextBox"
$DescriptionTextBox.enabled = $false
$CIPropertiesForm.Controls.Add($DescriptionTextBox)

$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Size(10,55)
$Label.AutoSize = $true
$label.Text = "CI Group"
$CIPropertiesForm.Controls.Add($label)

$CIPropertiesForm_CIGroupComboBox = New-Object System.Windows.Forms.ComboBox
$CIPropertiesForm_CIGroupComboBox.FormattingEnabled = $True
$CIPropertiesForm_CIGroupComboBox.Location = New-Object System.Drawing.Size(100,50)
$CIPropertiesForm_CIGroupComboBox.DropDownStyle = "DropDownList"
$CIPropertiesForm_CIGroupComboBox.Name = "CI Group"
$CIPropertiesForm_CIGroupComboBox.Size = New-Object System.Drawing.Size(140,20)
$CIPropertiesForm_CIGroupComboBox.add_SelectedIndexChanged({ CIPropertiesForm_CIGroupComboBox_Changed })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_CIGroupComboBox)

$CIPropertiesForm_AddCIGroupButton = New-Object system.Windows.Forms.Button
$CIPropertiesForm_AddCIGroupButton.Size = New-Object System.Drawing.Size(20,20)
$CIPropertiesForm_AddCIGroupButton.Location = New-Object System.Drawing.Point(245,50)
$CIPropertiesForm_AddCIGroupButton.Image = [System.Convert]::FromBase64String($AddImg)
$CIPropertiesForm_AddCIGroupButton.Add_Click({ PAFConfig-NewCIGroupForm })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_AddCIGroupButton)

$CIPropertiesForm_DeleteCIButton = New-Object system.Windows.Forms.Button
$CIPropertiesForm_DeleteCIButton.Size = New-Object System.Drawing.Size(20,20)
$CIPropertiesForm_DeleteCIButton.Location = New-Object System.Drawing.Point(270,50)
$CIPropertiesForm_DeleteCIButton.Image = [System.Convert]::FromBase64String($DeleteImg)
$CIPropertiesForm_DeleteCIButton.Add_Click({ PAFConfig-DeleteObject -Type "CIGroup" })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_DeleteCIButton)

$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Size(10,80)
$Label.AutoSize = $true
$label.Text = "CI Type"
$CIPropertiesForm.Controls.Add($label)

$CIPropertiesForm_CITypesComboBox = New-Object System.Windows.Forms.ComboBox
$CIPropertiesForm_CITypesComboBox.FormattingEnabled = $false
$CIPropertiesForm_CITypesComboBox.Size = New-Object System.Drawing.Size(140,20)
$CIPropertiesForm_CITypesComboBox.Location = New-Object System.Drawing.Size(100,80)
$CIPropertiesForm_CITypesComboBox.DropDownStyle = "DropDownList"
$CIPropertiesForm_CITypesComboBox.Name = "SystemsType"
$CIPropertiesForm_CITypesComboBox.add_SelectedIndexChanged({ CIPropertiesForm_CITypesComboBox_Changed })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_CITypesComboBox)

$CIPropertiesForm_AddCITypeButton = New-Object system.Windows.Forms.Button
$CIPropertiesForm_AddCITypeButton.Size = New-Object System.Drawing.Size(20,20)
$CIPropertiesForm_AddCITypeButton.Location = New-Object System.Drawing.Point(245,80)
$CIPropertiesForm_AddCITypeButton.Image = [System.Convert]::FromBase64String($AddImg)
$CIPropertiesForm_AddCITypeButton.Add_Click({ PAFConfig-NewCITypeForm })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_AddCITypeButton)

$CIPropertiesForm_DeleteCITypeButton = New-Object system.Windows.Forms.Button
$CIPropertiesForm_DeleteCITypeButton.Size = New-Object System.Drawing.Size(20,20)
$CIPropertiesForm_DeleteCITypeButton.Location = New-Object System.Drawing.Point(270,80)
$CIPropertiesForm_DeleteCITypeButton.Image = [System.Convert]::FromBase64String($DeleteImg)
$CIPropertiesForm_DeleteCITypeButton.Add_Click({ PAFConfig-DeleteObject -Type "CIType" })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_DeleteCITypeButton)

$CIPropertiesForm_GridView = New-Object system.Windows.Forms.DataGridView
$CIPropertiesForm_GridView.Size = New-Object System.Drawing.Size(140,245)
$CIPropertiesForm_GridView.Location = New-Object System.Drawing.Point(100,110)
$CIPropertiesForm_GridView.ColumnCount = 1
$CIPropertiesForm_GridView.AutoSizeColumnsMode = 'fill'
$CIPropertiesForm_GridView.ColumnHeadersVisible = $true
$CIPropertiesForm_GridView.RowHeadersVisible = $false
$CIPropertiesForm_GridView.AllowUserToResizeRows = $false
$CIPropertiesForm_GridView.Columns[0].Name = "Properties"
$CIPropertiesForm_GridView.Columns[0].SortMode = 0
$CIPropertiesForm_GridView.Add_KeyDown( { If (($_.KeyCode -eq "Delete")) { If ($CIPropertiesForm_GridView.CurrentCell.RowIndex) { $CIPropertiesForm_GridView.Rows[$CIPropertiesForm_GridView.CurrentCell.RowIndex].Cells[$CIPropertiesForm_GridView.CurrentCell.ColumnIndex].value = "";  } } })
$CIPropertiesForm_GridView.Add_CellValueChanged({ PAFConfig-CIPropertiesForm_SaveProp_DeleteEmptyRow })
$CIPropertiesForm_GridView.Add_CellEndEdit({ PAFConfig-CIPropertiesForm_SaveProp; PAFConfig-CIPropertiesForm_SaveProp_DeleteEmptyRow })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_GridView)

#Set vertical offset
$h = 365
$CIPropertiesForm_btn_ok = New-Object system.Windows.Forms.Button
$CIPropertiesForm_btn_ok.Text = "Ok"
$CIPropertiesForm_btn_ok.Size = New-Object System.Drawing.Size(100,30)
$CIPropertiesForm_btn_ok.Location = New-Object System.Drawing.Point(110,$h)
$CIPropertiesForm_btn_ok.Add_Click({ PAFConfig-CIProperties_Save })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_btn_ok)

$CIPropertiesForm_btn_cancel = New-Object system.Windows.Forms.Button
$CIPropertiesForm_btn_cancel.Text = "Cancel"
$CIPropertiesForm_btn_cancel.Width = 100
$CIPropertiesForm_btn_cancel.Height = 30
$CIPropertiesForm_btn_cancel.Location = New-Object System.Drawing.Point(230,$h)
$CIPropertiesForm_btn_cancel.Add_Click({ $CIPropertiesForm.Close() })
$CIPropertiesForm.Controls.Add($CIPropertiesForm_btn_cancel)

ForEach ($CIGroup in $global:PAFDefaultConfig.CIConfig.CIGroup) { $CIPropertiesForm_CIGroupComboBox.Items.Add($CIGroup) }
$CIPropertiesForm_CIGroupComboBox.SelectedIndex = 0
$CIPropertiesForm_GridView.Rows[0].ReadOnly = $true

[void]$CIPropertiesForm.ShowDialog()
}

Function CIPropertiesForm_CITypesComboBox_Changed {
$CIPropertiesForm_GridView.Rows.Clear()

ForEach ($Property in (($global:PAFDefaultConfig.CIConfig | ? {$_.CIGroup -eq $CIPropertiesForm_CIGroupComboBox.SelectedItem}).Types | ? {$_.Type -eq $CIPropertiesForm_CITypesComboBox.SelectedItem}).Properties) {
	$CIPropertiesForm_GridView.Rows.Add($Property)
	}
}

Function CIPropertiesForm_CIGroupComboBox_Changed {
$DescriptionTextBox.Text = ($global:PAFDefaultConfig.CIConfig | ? {$_.CIGroup -eq $CIPropertiesForm_CIGroupComboBox.SelectedItem}).Description
$CIPropertiesForm_CITypesComboBox.Items.Clear()
$CIPropertiesForm_GridView.Rows.Clear()
ForEach ($Type in ($global:PAFDefaultConfig.CIConfig | ? {$_.CIGroup -eq $CIPropertiesForm_CIGroupComboBox.SelectedItem}).Types.Type ) { $CIPropertiesForm_CITypesComboBox.Items.Add($Type) }
If ($CIPropertiesForm_CITypesComboBox.Items.count) {$CIPropertiesForm_CITypesComboBox.SelectedIndex = 0 }
Else { $CIPropertiesForm_CITypesComboBox.Text = "" }
}

Function PAFConfig-CIPropertiesForm_SaveProp {
$NewProperties = @()
ForEach ($row in $CIPropertiesForm_GridView.Rows) { If ($row.Cells[0].Value) { $NewProperties += $row.Cells[0].Value } }
(($global:PAFDefaultConfig.CIConfig | ? {$_.CIGroup -eq $CIPropertiesForm_CIGroupComboBox.SelectedItem}).Types | ? {$_.Type -eq $CIPropertiesForm_CITypesComboBox.SelectedItem}).Properties = $NewProperties
}

Function PAFConfig-CIPropertiesForm_SaveProp_DeleteEmptyRow {
Try { 
	If (!$CIPropertiesForm_GridView.Rows[$CIPropertiesForm_GridView.CurrentCell.RowIndex].Cells[0].value ) {
		$CIPropertiesForm_GridView.Rows.RemoveAt($CIPropertiesForm_GridView.CurrentCell.RowIndex)
		} 
	PAFConfig-CIPropertiesForm_SaveProp
    }
Catch {}
}

Function PAFConfig-NewCITypeForm {
$NewCITypeForm = New-Object system.Windows.Forms.Form
$NewCITypeForm.ClientSize = '360,100'
$NewCITypeForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$NewCITypeForm.Text = "CI editor: New CI Type"
$NewCITypeForm.TopMost = $false
$NewCITypeForm.FormBorderStyle = "FixedSingle"
$NewCITypeForm.MaximizeBox = $false

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Selected CI Group"
$Label.AutoSize = $true
$Label.Width = 25
$Label.Height = 10
$Label.Location = New-Object System.Drawing.Point(10,15)
$NewCITypeForm.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "CI Type name"
$Label.AutoSize = $true
$Label.Width = 25
$Label.Height = 10
$Label.Location = New-Object System.Drawing.Point(10,45)
$NewCITypeForm.Controls.Add($Label)

$NewTypeTextBox = New-Object system.Windows.Forms.TextBox
$NewTypeTextBox.multiline = $false
$NewTypeTextBox.Width = 200
$NewTypeTextBox.Height = 20
$NewTypeTextBox.Enabled = $false
$NewTypeTextBox.Text = $CIPropertiesForm_CIGroupComboBox.SelectedItem
$NewTypeTextBox.Location = New-Object System.Drawing.Point(150,10)
$NewCITypeForm.Controls.Add($NewTypeTextBox)


$NewCITypeTextBox = New-Object system.Windows.Forms.TextBox
$NewCITypeTextBox.multiline = $false
$NewCITypeTextBox.Width = 200
$NewCITypeTextBox.Height = 20
$NewCITypeTextBox.Location = New-Object System.Drawing.Point(150,40)
$NewCITypeForm.Controls.Add($NewCITypeTextBox)

$OkButton = New-Object system.Windows.Forms.Button
$OkButton.Text = "Ok"
$OkButton.Width = 70
$OkButton.Height = 20
$OkButton.Location = New-Object System.Drawing.Point(200,70)
$OkButton.Add_Click({ PAFConfig-NewObject -Type "CIType" })
$NewCITypeForm.Controls.Add($OkButton)

$CancelButton = New-Object system.Windows.Forms.Button
$CancelButton.Text = "Cancel"
$CancelButton.Width = 70
$CancelButton.Height = 20
$CancelButton.Location = New-Object System.Drawing.Point(280,70)
$CancelButton.Add_Click({ $NewCITypeForm.Close() })
$NewCITypeForm.Controls.Add($CancelButton)

$NewCITypeForm.ShowDialog() | out-null 
}

Function PAFConfig-NewCIGroupForm {
$NewCIGroupForm = New-Object system.Windows.Forms.Form
$NewCIGroupForm.ClientSize = '360,100'
$NewCIGroupForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$NewCIGroupForm.Text = "CI editor: New CI Group"
$NewCIGroupForm.TopMost = $true
$NewCIGroupForm.FormBorderStyle = "FixedSingle"
$NewCIGroupForm.MaximizeBox = $false

$Label1 = New-Object system.Windows.Forms.Label
$Label1.Text = "CI Group name"
$Label1.AutoSize = $true
$Label1.Width = 25
$Label1.Height = 10
$Label1.Location = New-Object System.Drawing.Point(10,15)
$NewCIGroupForm.Controls.Add($Label1)

$Label2 = New-Object system.Windows.Forms.Label
$Label2.Text = "Description"
$Label2.AutoSize = $true
$Label2.Width = 25
$Label2.Height = 10
$Label2.Location = New-Object System.Drawing.Point(10,45)
$NewCIGroupForm.Controls.Add($Label2)

$NewCIGroupNameTextBox = New-Object system.Windows.Forms.TextBox
$NewCIGroupNameTextBox.multiline = $false
$NewCIGroupNameTextBox.Width = 200
$NewCIGroupNameTextBox.Height = 20
$NewCIGroupNameTextBox.Location = New-Object System.Drawing.Point(150,10)
$NewCIGroupForm.Controls.Add($NewCIGroupNameTextBox)

$NewCIGroupDescrTextBox = New-Object system.Windows.Forms.TextBox
$NewCIGroupDescrTextBox.multiline = $false
$NewCIGroupDescrTextBox.Width = 200
$NewCIGroupDescrTextBox.Height = 20
$NewCIGroupDescrTextBox.Location = New-Object System.Drawing.Point(150,40)
$NewCIGroupForm.Controls.Add($NewCIGroupDescrTextBox)

$OkButton = New-Object system.Windows.Forms.Button
$OkButton.Text = "Ok"
$OkButton.Width = 70
$OkButton.Height = 20
$OkButton.Location = New-Object System.Drawing.Point(200,70)
$OkButton.Add_Click({ PAFConfig-NewObject -Type "CIGroup" })
$NewCIGroupForm.Controls.Add($OkButton)

$CancelButton = New-Object system.Windows.Forms.Button
$CancelButton.Text = "Cancel"
$CancelButton.Width = 70
$CancelButton.Height = 20
$CancelButton.Location = New-Object System.Drawing.Point(280,70)
$CancelButton.Add_Click({ $NewCIGroupForm.Close() })
$NewCIGroupForm.Controls.Add($CancelButton)

$NewCIGroupForm.ShowDialog() | out-null 
}

Function PAFConfig-DeleteObject {
	param (
		[Parameter(Mandatory=$true)] $Type
		)
Switch ($Type) {
	"CIGroup" {
		$CIPropertiesForm_CIGroupComboBox.Items.Remove($CIPropertiesForm_CIGroupComboBox.SelectedItem)
		$CIPropertiesForm_CITypesComboBox.Items.Clear()
		$CIPropertiesForm_GridView.Rows.Clear()
		If ($CIPropertiesForm_CIGroupComboBox.Items.count) { $CIPropertiesForm_CIGroupComboBox.SelectedIndex = 0 }
		}
	"CIType" {
		$CIPropertiesForm_CITypesComboBox.Items.Remove($CIPropertiesForm_CITypesComboBox.SelectedItem)
		$CIPropertiesForm_GridView.Rows.Clear()
		If ($CIPropertiesForm_CITypesComboBox.Items.count) { $CIPropertiesForm_CITypesComboBox.SelectedIndex = 0 }
		}
	}
}

Function PAFConfig-NewObject {
	param ( [Parameter(Mandatory=$true)] $Type )
Switch ($Type) {
	"CIGroup" {		
		$CIPropertiesForm_CIGroupComboBox.Items.Add($NewCIGroupNameTextBox.Text)
		$global:PAFDefaultConfig.CIConfig += [PSCustomObject][Ordered]@{'CIGroup' = $NewCIGroupNameTextBox.Text; 'Description' = $NewCIGroupDescrTextBox.Text; 'Types' = @()}
		If ($CIPropertiesForm_CIGroupComboBox.Items.count -eq 1) { $CIPropertiesForm_CIGroupComboBox.SelectedIndex = 0 }
		$NewCIGroupForm.Close()
		}
	"CIType" {
		$CIPropertiesForm_CITypesComboBox.Items.Add($NewCITypeTextBox.text)
		($global:PAFDefaultConfig.CIConfig | ? {$_.CIGroup -eq $CIPropertiesForm_CIGroupComboBox.SelectedItem}).Types += [Ordered]@{'Type' = $NewCITypeTextBox.text; 'Properties' = @("Name")}
		If ($CIPropertiesForm_CITypesComboBox.Items.count -eq 1) { $CIPropertiesForm_CITypesComboBox.SelectedIndex = 0 }
		$NewCITypeForm.Close()
		}
	}
}

Function PAFConfig-CIProperties_Save {
$global:PAFDefaultConfig | ConvertTo-Json -Depth 10 | Set-Content -Path "$PSScriptRoot\defaults.pafp"
[System.Windows.Forms.MessageBox]::Show(("CI configuration saved"),"PAF Configuration") | out-null
$CIPropertiesForm.Close()
}

#####Re encryptuon form here
Function PAFConfig-ReEncryptForm {
$ReEncryptForm = New-Object System.Windows.Forms.Form
$ReEncryptForm.Text = "Re-encrypt"
$ReEncryptForm.FormBorderStyle = "FixedSingle"
$ReEncryptForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$ReEncryptForm.MaximizeBox = $false
$ReEncryptForm.StartPosition = "centerscreen"
$ReEncryptForm.TopMost = $false
$ReEncryptForm.AutoSize = $true
$ReEncryptForm.ClientSize = "580,190"

#Set vertical offset
$h = 20
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "File location"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$ReEncryptForm.Controls.Add($Label)

$FileLocation = New-Object system.Windows.Forms.TextBox
$FileLocation.multiline = $false
$FileLocation.Width = 300
$FileLocation.Height = 20
$FileLocation.Text = ""
$FileLocation.Location = New-Object System.Drawing.Point(150,$h1)
$ReEncryptForm.Controls.Add($FileLocation)

$BrowseFile = New-Object system.Windows.Forms.Button
$BrowseFile.Text = "Browse"
$BrowseFile.Width = 80
$BrowseFile.Height = 20
$BrowseFile.Location = New-Object System.Drawing.Point(470,$h1)
$BrowseFile.Add_Click({ $Path = Open-File-Dialog -FileFilter "environment file|*.pafe|config file|*.pafc" -Title "Select file"; If ($Path) { $FileLocation.Text = $Path } })
$ReEncryptForm.Controls.Add($BrowseFile)

$h = 50
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Select source SSL thumbprint:"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$ReEncryptForm.Controls.Add($Label)

$h = 70
$ReEncryptForm_Source = New-Object System.Windows.Forms.ComboBox
$ReEncryptForm_Source.FormattingEnabled = $True
$ReEncryptForm_Source.Location = New-Object System.Drawing.Size(10,$h)
$ReEncryptForm_Source.DropDownStyle = "DropDownList"
$ReEncryptForm_Source.Size = New-Object System.Drawing.Size(300,20)
ForEach ($cert in (Get-Item -Path "Cert:\LocalMachine\My\*") | ? { $_.EnhancedKeyUsageList.FriendlyName -contains "Document Encryption"} | Select FriendlyName,Thumbprint) { $ReEncryptForm_Source.Items.Add($cert.Thumbprint) }
$ReEncryptForm_Source.SelectedIndex = 0
$ReEncryptForm.Controls.Add($ReEncryptForm_Source)


$h = 100
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Select target SSL thumbprint:"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$ReEncryptForm.Controls.Add($Label)

$h = 120
$ReEncryptForm_Target = New-Object System.Windows.Forms.ComboBox
$ReEncryptForm_Target.FormattingEnabled = $True
$ReEncryptForm_Target.Location = New-Object System.Drawing.Size(10,$h)
$ReEncryptForm_Target.DropDownStyle = "DropDownList"
$ReEncryptForm_Target.Size = New-Object System.Drawing.Size(300,20)
ForEach ($cert in (Get-Item -Path "Cert:\LocalMachine\My\*") | ? { $_.EnhancedKeyUsageList.FriendlyName -contains "Document Encryption"} | Select FriendlyName,Thumbprint) { $ReEncryptForm_Target.Items.Add($cert.Thumbprint) }
$ReEncryptForm_Target.SelectedIndex = 0
$ReEncryptForm.Controls.Add($ReEncryptForm_Target)


$h = 150
$ReEncryptForm_btn_ok = New-Object system.Windows.Forms.Button
$ReEncryptForm_btn_ok.Text = "Ok"
$ReEncryptForm_btn_ok.Width = 100
$ReEncryptForm_btn_ok.Height = 30
$ReEncryptForm_btn_ok.Location = New-Object System.Drawing.Point(355,$h)
$ReEncryptForm_btn_ok.Add_Click({ PAFConfig-ReEncryptForm_ReEncrypt })
$ReEncryptForm.Controls.Add($ReEncryptForm_btn_ok)

$ReEncryptForm_btn_cancel = New-Object system.Windows.Forms.Button
$ReEncryptForm_btn_cancel.Text = "Cancel"
$ReEncryptForm_btn_cancel.Width = 100
$ReEncryptForm_btn_cancel.Height = 30
$ReEncryptForm_btn_cancel.Location = New-Object System.Drawing.Point(470,$h)
$ReEncryptForm_btn_cancel.Add_Click({ $ReEncryptForm.Close() })
$ReEncryptForm.Controls.Add($ReEncryptForm_btn_cancel)

[void]$ReEncryptForm.ShowDialog()
}

Function PAFConfig-ReEncryptForm_ReEncrypt {
If ($FileLocation.Text) {
	$SSLSoruceCertificate = Get-Item -Path "Cert:\LocalMachine\My\$($ReEncryptForm_Source.SelectedItem)"
	$SourceKey =  [Convert]::FromBase64String(($SSLSoruceCertificate.PrivateKey.ToXmlString($false) -replace ".*<Modulus>" -replace "</Modulus>.*"))[0..31]

	$SSLTargetCertificate = Get-Item -Path "Cert:\LocalMachine\My\$($ReEncryptForm_Target.SelectedItem)"
	$TargetKey =  [Convert]::FromBase64String(($SSLTargetCertificate.PrivateKey.ToXmlString($false) -replace ".*<Modulus>" -replace "</Modulus>.*"))[0..31]

	$tmp = Decrypt -Path $($FileLocation.Text) -Key $SourceKey
	If ($tmp) {
		Encrypt -Variable $tmp -Key $TargetKey | Set-Content -Path $FileLocation.Text
		[System.Windows.Forms.MessageBox]::Show(("Done"),"PAF Configuration") | out-null
		$ReEncryptForm.Close()
		}
	Else { [System.Windows.Forms.MessageBox]::Show(("Re-encryption failed"),"PAF Configuration") | out-null }
	}
Else { [System.Windows.Forms.MessageBox]::Show(("Please select file to re-encrypt"),"PAF Configuration") | out-null }
}


#Main Form
$ConfForm = New-Object system.Windows.Forms.Form
$ConfForm.ClientSize = '580,695'
$ConfForm.Icon = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $IconStream).GetHIcon())
$ConfForm.Text = "PowerShell Automation Framework Configuration editor"
$ConfForm.TopMost = $false
$ConfForm.FormBorderStyle = "FixedSingle"
$ConfForm.MaximizeBox = $false
$ConfForm.StartPosition = "centerscreen"
$ConfForm.Add_FormClosing({ PAFConfig-Exit })

$MainMenu = new-object System.Windows.Forms.MenuStrip
$MainMenu.Name = "MainMenu"
$MainMenu.BackColor = '#F0F0F0'
$ConfForm.Controls.Add($MainMenu)
$ConfForm.MainMenuStrip = $MainMenu

$FileMenu = new-object System.Windows.Forms.ToolStripMenuItem
$FileMenu.Name = "FileMenu"
$FileMenu.Text = "&File"
$MainMenu.Items.Add($FileMenu) | out-null

$FileMenu_New = new-object System.Windows.Forms.ToolStripMenuItem
$FileMenu_New.Name = "FileMenu_New"
$FileMenu_New.ShortcutKeys = "Control, N"
$FileMenu_New.Text = "&New"
$FileMenu_New.Image = [System.Convert]::FromBase64String($NewPAFImg)
$FileMenu_New.Enabled = $false
$FileMenu_New.Add_Click( {  PAFConfig-NewPAFScriptForm } )
$FileMenu.DropDownItems.Add($FileMenu_New) | out-null

$FileMenu_Open = new-object System.Windows.Forms.ToolStripMenuItem
$FileMenu_Open.Name = "FileMenu_Open"
$FileMenu_Open.ShortcutKeys = "Control, O"
$FileMenu_Open.Text = "&Open"
$FileMenu_Open.Image = [System.Convert]::FromBase64String($OpenImg)
$FileMenu_Open.Enabled = $false
$FileMenu_Open.Add_Click( { PAFConfig-Open } )
$FileMenu.DropDownItems.Add($FileMenu_Open) | out-null

$FileMenu_Save = new-object System.Windows.Forms.ToolStripMenuItem
$FileMenu_Save.Name = "FileMenu_Save"
$FileMenu_Save.ShortcutKeys = "Control, S"
$FileMenu_Save.Text = "&Save"
$FileMenu_Save.Image = [System.Convert]::FromBase64String($SaveImg)
$FileMenu_Save.Enabled = $false
$FileMenu_Save.Add_Click( { PAFConfig-Save } )
$FileMenu.DropDownItems.Add($FileMenu_Save) | out-null

$FileMenu_SaveAs = new-object System.Windows.Forms.ToolStripMenuItem
$FileMenu_SaveAs.Name = "FileMenu_SaveAs"
$FileMenu_SaveAs.ShortcutKeys = "Control, Shift, S"
$FileMenu_SaveAs.Text = "&Save As"
$FileMenu_SaveAs.Image = [System.Convert]::FromBase64String($SaveAsImg)
$FileMenu_SaveAs.Enabled = $false
$FileMenu_SaveAs.Add_Click( { PAFConfig-SaveAs } )
$FileMenu.DropDownItems.Add($FileMenu_SaveAs) | out-null

$FileMenuSeparator = New-Object System.Windows.Forms.ToolStripSeparator
$FileMenu.DropDownItems.Add($FileMenuSeparator) | out-null

$FileMenu_Exit = new-object System.Windows.Forms.ToolStripMenuItem
$FileMenu_Exit.Name = "FileMenu_Exit"
$FileMenu_Exit.ShortcutKeys = "Control, Q"
$FileMenu_Exit.Text = "E&xit"
$FileMenu_Exit.Image = [System.Convert]::FromBase64String($ExitImg)
$FileMenu_Exit.Add_Click( { $ConfForm.Close() } )
$FileMenu.DropDownItems.Add($FileMenu_Exit) | out-null

$EnvironmentMenu = new-object System.Windows.Forms.ToolStripMenuItem
$EnvironmentMenu.Name = "EvnMenu"
$EnvironmentMenu.Text = "&Environment"
$MainMenu.Items.Add($EnvironmentMenu) | out-null

$NewEnv = new-object System.Windows.Forms.ToolStripMenuItem
$NewEnv.Name = "NewEnv"
$NewEnv.ShortcutKeys = "Control, Shift, N"
$NewEnv.Text = "New *.pafe"
$NewEnv.Image = [System.Convert]::FromBase64String($NewJSONImg)
$NewEnv.Enabled = $false
$NewEnv.Add_Click( { PAFConfig-NewEnv } )
$EnvironmentMenu.DropDownItems.Add($NewEnv) | out-null

$OpenEnv = new-object System.Windows.Forms.ToolStripMenuItem
$OpenEnv.Name = "EditEnv"
$OpenEnv.ShortcutKeys = "Control, Shift, O"
$OpenEnv.Text = "Open *.pafe"
$OpenEnv.Image = [System.Convert]::FromBase64String($OpenJSONImg)
$OpenEnv.Enabled = $false
$OpenEnv.Add_Click({ PAFConfig-OpenEnv })
$EnvironmentMenu.DropDownItems.Add($OpenEnv) | out-null

$EditEnv = new-object System.Windows.Forms.ToolStripMenuItem
$EditEnv.Name = "EditEnv"
$EditEnv.ShortcutKeys = "Control, E"
$EditEnv.Text = "Edit current .pafe file"
$EditEnv.Image = [System.Convert]::FromBase64String($EditJSONImg)
$EditEnv.Enabled = $false
$EditEnv.Add_Click( { PAFConfig-EditEnv -Path $envLocation.Text } )
$EnvironmentMenu.DropDownItems.Add($EditEnv) | out-null

$ConfigCIProperties = new-object System.Windows.Forms.ToolStripMenuItem
$ConfigCIProperties.Name = "ConfigCI"
#$Select_Thumbprint.ShortcutKeys = "Control, K"
$ConfigCIProperties.Text = "CI confgurations"
$ConfigCIProperties.Image = [System.Convert]::FromBase64String($ConfigCIPropertiesImg)
$ConfigCIProperties.Add_Click( { PAFConfig-CIProperties } )
$EnvironmentMenu.DropDownItems.Add($ConfigCIProperties) | out-null


$ConfigMenu = new-object System.Windows.Forms.ToolStripMenuItem
$ConfigMenu.Name = "ConfigMenuMenu"
$ConfigMenu.Text = "Configuration"
$MainMenu.Items.Add($ConfigMenu) | out-null

$ManageSSL = new-object System.Windows.Forms.ToolStripMenuItem
$ManageSSL.Name = "ManageSSL"
#$Select_Thumbprint.ShortcutKeys = "Control, K"
$ManageSSL.Text = "SSL encryption"
$ManageSSL.Image = [System.Convert]::FromBase64String($LoadKeyImg)
$ManageSSL.Add_Click( { PAFConfig-ManageSSLForm } )
$ConfigMenu.DropDownItems.Add($ManageSSL) | out-null

$ConfigModules = new-object System.Windows.Forms.ToolStripMenuItem
$ConfigModules.Name = "ConfigModules"
#$Select_Thumbprint.ShortcutKeys = "Control, K"
$ConfigModules.Text = "Modules autoload"
$ConfigModules.Image = [System.Convert]::FromBase64String($PSModulesImg)
$ConfigModules.Add_Click( { PAFConfig-EditModulesForm } )
$ConfigMenu.DropDownItems.Add($ConfigModules) | out-null

$ConfigStyle = new-object System.Windows.Forms.ToolStripMenuItem
$ConfigStyle.Name = "ConfigStyle"
#$Select_Thumbprint.ShortcutKeys = "Control, K"
$ConfigStyle.Text = "Visual styles"
$ConfigStyle.Image = [System.Convert]::FromBase64String($EditStyleImg)
$ConfigStyle.Add_Click( { PAFConfig-EditStyleForm } )
$ConfigMenu.DropDownItems.Add($ConfigStyle) | out-null

$ActionMenu = new-object System.Windows.Forms.ToolStripMenuItem
$ActionMenu.Name = "ActionMenu"
$ActionMenu.Text = "&Actions"
$MainMenu.Items.Add($ActionMenu) | out-null

$Schedule = new-object System.Windows.Forms.ToolStripMenuItem
$Schedule.Name = "Schedule"
$Schedule.ShortcutKeys = "Control, D"
$Schedule.Text = "Task scheduler"
$Schedule.Image = [System.Convert]::FromBase64String($ScheduleImg)
$Schedule.Add_Click( { PAFConfig-ScheduleForm } )
$ActionMenu.DropDownItems.Add($Schedule) | out-null

$ReEncrypt = new-object System.Windows.Forms.ToolStripMenuItem
$ReEncrypt.Name = "Schedule"
$ReEncrypt.ShortcutKeys = "Control, R"
$ReEncrypt.Text = "Re-encrypt files"
$ReEncrypt.Image = [System.Convert]::FromBase64String($ReEncryptImg)
$ReEncrypt.Add_Click( { PAFConfig-ReEncryptForm } )
$ActionMenu.DropDownItems.Add($ReEncrypt) | out-null

$HelpMenu = new-object System.Windows.Forms.ToolStripMenuItem
$HelpMenu.Name = "HelpMenu"
$HelpMenu.Text = "?"
$MainMenu.Items.Add($HelpMenu) | out-null

$Help = new-object System.Windows.Forms.ToolStripMenuItem
$Help.Name = "Help"
$Help.ShortcutKeys = "F1"
$Help.Text = "Help"
$Help.Image = [System.Convert]::FromBase64String($HelpImg)
$Help.Add_Click( { .\Modules\paf.chm } )
$HelpMenu.DropDownItems.Add($Help) | out-null

$HelpMenuSeparator = New-Object System.Windows.Forms.ToolStripSeparator
$HelpMenu.DropDownItems.Add($HelpMenuSeparator) | out-null

$About = new-object System.Windows.Forms.ToolStripMenuItem
$About.Name = "About"
$About.Text = "About"
$About.Image = [System.Convert]::FromBase64String($AboutImg)
$About.Add_Click( { PAFConfig-About } )
$HelpMenu.DropDownItems.Add($About) | out-null

$GeneralSettings = New-Object system.Windows.Forms.Groupbox
$GeneralSettings.size = New-Object System.Drawing.Point(550,225)
$GeneralSettings.Text = "General settings"
$GeneralSettings.Location = New-Object System.Drawing.Point(15,25)
$ConfForm.Controls.Add($GeneralSettings)

#Set vertical offset
$initial_offset = 20
$vertical_offset = 30
$h = $initial_offset
Set-PSBreakpoint -Variable h1 -Mode Read -Action {$Global:h1 = $h - 5;$Global:h1} | out-null
$h1 | out-null
 
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Customer name"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$GeneralSettings.Controls.Add($Label)

$CustomerName = New-Object system.Windows.Forms.TextBox
$CustomerName.multiline = $false
$CustomerName.Width = 400
$CustomerName.Height = 20
$CustomerName.Text = ($global:Config.Customer).CustomerName
$CustomerName.Location = New-Object System.Drawing.Point(140,$h1)
$CustomerName.Add_TextChanged({ PAFConfig-FormUpdated })
$GeneralSettings.Controls.Add($CustomerName)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Report name"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$GeneralSettings.Controls.Add($Label)

$ReportName = New-Object system.Windows.Forms.TextBox
$ReportName.multiline = $false
$ReportName.Width = 400
$ReportName.Height = 20
$ReportName.Text = ($global:Config.Customer).ReportName
$ReportName.Location = New-Object System.Drawing.Point(140,$h1)
$ReportName.Add_TextChanged({ PAFConfig-FormUpdated })
$GeneralSettings.Controls.Add($ReportName)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = ".pafe file location"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$GeneralSettings.Controls.Add($Label)

$envLocation = New-Object system.Windows.Forms.TextBox
$envLocation.multiline = $false
$envLocation.Width = 300
$envLocation.Height = 20
$envLocation.Text = $global:Config.envFileLocation
$envLocation.Location = New-Object System.Drawing.Point(140,$h1)
$envLocation.Add_TextChanged({ PAFConfig-FormUpdated })
$GeneralSettings.Controls.Add($envLocation)

$BrowseEnv = New-Object system.Windows.Forms.Button
$BrowseEnv.Text = "Browse"
$BrowseEnv.Width = 80
$BrowseEnv.Height = 20
$BrowseEnv.Location = New-Object System.Drawing.Point(460,$h1)
$BrowseEnv.Add_Click({ $EnvPath = Open-File-Dialog -FileName "env.pafe" -FileFilter "environment file|*.pafe"; If ($EnvPath) { $envLocation.Text = $EnvPath } Else {$envLocation.Text = ""} })
$GeneralSettings.Controls.Add($BrowseEnv)

#Set vertical offset
$h += 30
$Label1 = New-Object system.Windows.Forms.Label
$Label1.Text = "Reports folder"
$Label1.AutoSize = $true
$Label1.Location = New-Object System.Drawing.Point(10,$h)
$GeneralSettings.Controls.Add($Label1)

$ReportLocation = New-Object system.Windows.Forms.TextBox
$ReportLocation.multiline = $false
$ReportLocation.Width = 300
$ReportLocation.Height = 20
$ReportLocation.Text = $global:Config.ReportLocation
$ReportLocation.Location = New-Object System.Drawing.Point(140,$h1)
$ReportLocation.Add_TextChanged({ $ReportFileSample.Text = $($ReportLocation.Text -creplace "%HH%", "$(Get-Date -format HH)" -creplace "%hh%", "$(Get-Date -format hh)" -creplace "%mm%", "$(Get-Date -format mm)" -creplace "%ss%", "$(Get-Date -format ss)" -creplace "%dd%", "$(Get-Date -format dd)" -creplace "%MM%", "$(Get-Date -format MM)" -creplace "%MMMM%", "$(Get-Date -format MMMM)" -creplace "%yy%", "$(Get-Date -format yy)" -creplace "%yyyy%", "$(Get-Date -format yyyy)") + "\" + $($ReportFileTemplate.Text -creplace "%HH%", "$(Get-Date -format HH)" -creplace "%hh%", "$(Get-Date -format hh)" -creplace "%mm%", "$(Get-Date -format mm)" -creplace "%ss%", "$(Get-Date -format ss)" -creplace "%dd%", "$(Get-Date -format dd)" -creplace "%MM%", "$(Get-Date -format MM)" -creplace "%MMMM%", "$(Get-Date -format MMMM)" -creplace "%yy%", "$(Get-Date -format yy)" -creplace "%yyyy%", "$(Get-Date -format yyyy)"); $ReportFileSample.SelectionStart = $ReportFileSample.Text.Length + 1; PAFConfig-FormUpdated })
$GeneralSettings.Controls.Add($ReportLocation)

$BrowseReport = New-Object system.Windows.Forms.Button
$BrowseReport.Text = "Browse"
$BrowseReport.Width = 80
$BrowseReport.Height = 20
$BrowseReport.Location = New-Object System.Drawing.Point(460,$h1)
$BrowseReport.Add_Click({ Open-Folder-Dialog -Textbox $ReportLocation })
$GeneralSettings.Controls.Add($BrowseReport)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "File name template"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$GeneralSettings.Controls.Add($Label)

$ReportFileTemplate = New-Object system.Windows.Forms.TextBox
$ReportFileTemplate.multiline = $false
$ReportFileTemplate.Width = 400
$ReportFileTemplate.Height = 20
$ReportFileTemplate.Text = ($global:Config.Customer).'NameTemplate'
$ReportFileTemplate.Location = New-Object System.Drawing.Point(140,$h1)
$ReportFileTemplate.Add_TextChanged({ $ReportFileSample.Text = $($ReportLocation.Text -creplace "%HH%", "$(Get-Date -format HH)" -creplace "%hh%", "$(Get-Date -format hh)" -creplace "%mm%", "$(Get-Date -format mm)" -creplace "%ss%", "$(Get-Date -format ss)" -creplace "%dd%", "$(Get-Date -format dd)" -creplace "%MM%", "$(Get-Date -format MM)" -creplace "%MMMM%", "$(Get-Date -format MMMM)" -creplace "%yy%", "$(Get-Date -format yy)" -creplace "%yyyy%", "$(Get-Date -format yyyy)") + "\" + $($ReportFileTemplate.Text -creplace "%HH%", "$(Get-Date -format HH)" -creplace "%hh%", "$(Get-Date -format hh)" -creplace "%mm%", "$(Get-Date -format mm)" -creplace "%ss%", "$(Get-Date -format ss)" -creplace "%dd%", "$(Get-Date -format dd)" -creplace "%MM%", "$(Get-Date -format MM)" -creplace "%MMMM%", "$(Get-Date -format MMMM)" -creplace "%yy%", "$(Get-Date -format yy)" -creplace "%yyyy%", "$(Get-Date -format yyyy)"); $ReportFileSample.SelectionStart = $ReportFileSample.Text.Length + 1; PAFConfig-FormUpdated })
$GeneralSettings.Controls.Add($ReportFileTemplate)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Report file full path"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$GeneralSettings.Controls.Add($Label)

$ReportFileSample = New-Object system.Windows.Forms.TextBox
$ReportFileSample.Width = 400
$ReportFileSample.Height = 20
$ReportFileSample.Text = ""
$ReportFileSample.ReadOnly = $true
$ReportFileSample.Location = New-Object System.Drawing.Point(140,$h1)
$GeneralSettings.Controls.Add($ReportFileSample)

<#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "PassDB URL"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$GeneralSettings.Controls.Add($Label)

$PassDB = New-Object system.Windows.Forms.TextBox
$PassDB.multiline = $false
$PassDB.Width = 400
$PassDB.Height = 20
$PassDB.Text = ($global:Config.Customer).'PassDB URL'
$PassDB.Location = New-Object System.Drawing.Point(140,$h1)
$PassDB.Add_TextChanged({ PAFConfig-FormUpdated })
$GeneralSettings.Controls.Add($PassDB)
#>
$CurrentFont = $Label.Font
$BoldFont = New-Object Drawing.Font($CurrentFont.FontFamily, $CurrentFont.Size, [Drawing.FontStyle]::Bold)

For ($i = 15; $i -lt 75; $i = $i + 30) {
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(125,$i)
$GeneralSettings.Controls.Add($Label)
}

For ($i = 105; $i -le 135; $i = $i + 30) {
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(125,$i)
$GeneralSettings.Controls.Add($Label)
}

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Send by e-mail"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(15,265)
$ConfForm.Controls.Add($Label)

$SendByEmail = New-Object system.Windows.Forms.ComboBox
$SendByEmail.Width = 200
$SendByEmail.Height = 20
@('No','Yes') | ForEach-Object {[void] $SendByEmail.Items.Add($_)}
$SendByEmail.Location = New-Object System.Drawing.Point(140,260)
$SendByEmail.SelectedItem = "No"
$SendByEmail.DropDownStyle = "DropDownList"
$SendByEmail.add_SelectedIndexChanged({ Switch ($SendByEmail.SelectedItem) { "Yes" { $EmailSettings.Visible = $true }; "No" { $EmailSettings.Visible = $false } }; PAFConfig-FormUpdated })
$ConfForm.Controls.Add($SendByEmail)

######Email settings Groupbox
$EmailSettings = New-Object system.Windows.Forms.Groupbox
$EmailSettings.size = New-Object System.Drawing.Point(550,370)
$EmailSettings.Text = "E-mail settings"
$EmailSettings.Visible = $false
$EmailSettings.Location = New-Object System.Drawing.Point(15,290)
$ConfForm.Controls.Add($EmailSettings)

For ($i = 15; $i -le 75; $i = $i + 30) {
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(125,$i)
$EmailSettings.Controls.Add($Label)
}

#Set vertical offset
$initial_offset = 20
$vertical_offset = 30
$h = $initial_offset

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Send to"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EmailSettings.Controls.Add($Label)

$MailTo = New-Object system.Windows.Forms.TextBox
$MailTo.multiline = $false
$MailTo.Width = 400
$MailTo.Height = 20
$MailTo.Text = ($global:Config.Mail).'e-mailTo'
$MailTo.Location = New-Object System.Drawing.Point(140,$h1)
$MailTo.Add_TextChanged({ PAFConfig-FormUpdated })
$EmailSettings.Controls.Add($MailTo)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "From"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EmailSettings.Controls.Add($Label)

$MailFrom = New-Object system.Windows.Forms.TextBox
$MailFrom.multiline = $false
$MailFrom.Width = 400
$MailFrom.Height = 20
$MailFrom.Text = ($global:Config.Mail).'e-mailFrom'
$MailFrom.Location = New-Object System.Drawing.Point(140,$h1)
$MailFrom.Add_TextChanged({ PAFConfig-FormUpdated })
$EmailSettings.Controls.Add($MailFrom)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Subject"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EmailSettings.Controls.Add($Label)

$MailSubject = New-Object system.Windows.Forms.TextBox
$MailSubject.multiline = $false
$MailSubject.Width = 400
$MailSubject.Height = 20
$MailSubject.Text = ($global:Config.Mail).Subject
$MailSubject.Location = New-Object System.Drawing.Point(140,$h1)
$MailSubject.Add_TextChanged({ PAFConfig-FormUpdated })
$EmailSettings.Controls.Add($MailSubject)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Body text"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$EmailSettings.Controls.Add($Label)

$MailBodyText = New-Object system.Windows.Forms.TextBox
$MailBodyText.multiline = $true
$MailBodyText.Width = 400
$MailBodyText.Height = 85
$MailBodyText.Text = ($global:Config.Mail).BodyText
$MailBodyText.Location = New-Object System.Drawing.Point(140,$h1)
$MailBodyText.Add_TextChanged({ PAFConfig-FormUpdated })
$EmailSettings.Controls.Add($MailBodyText)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Attach report file"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,200)
$EmailSettings.Controls.Add($Label)

$Attachreport = New-Object system.Windows.Forms.CheckBox
$Attachreport.AutoSize = $true
$Attachreport.Enabled = $true
$Attachreport.Checked = $false
$Attachreport.Location = New-Object System.Drawing.Point(140,200)
$EmailSettings.Controls.Add($Attachreport)


$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Send using"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,230)
$EmailSettings.Controls.Add($Label)

$MailingType = New-Object system.Windows.Forms.ComboBox
$MailingType.Width = 200
$MailingType.Height = 20
@('SMTP Server','vRealize Orchestrator') | ForEach-Object {[void] $MailingType.Items.Add($_)}
$MailingType.DropDownStyle = "DropDownList"
$MailingType.SelectedIndex = -1
$MailingType.Location = New-Object System.Drawing.Point(140,225)
$MailingType.add_SelectedIndexChanged({ PAFConfig-SetMailTransport })
$EmailSettings.Controls.Add($MailingType)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(125,225)
$EmailSettings.Controls.Add($Label)

######vRO Groupbox
$TransportSettingsVRO = New-Object system.Windows.Forms.Groupbox
$TransportSettingsVRO.size = New-Object System.Drawing.Point(520,105)
$TransportSettingsVRO.Visible = $false
$TransportSettingsVRO.Location = New-Object System.Drawing.Point(15,250)
$EmailSettings.Controls.Add($TransportSettingsVRO)

#Set vertical offset
$initial_offset = 20
$vertical_offset = 30
$h = $initial_offset

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "vRO hostname"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$TransportSettingsVRO.Controls.Add($Label)

$vROHostname = New-Object system.Windows.Forms.TextBox
$vROHostname.multiline = $false
$vROHostname.Width = 140
$vROHostname.Height = 20
$vROHostname.Text = ($global:Config.Mail).vROHostName
$vROHostname.Location = New-Object System.Drawing.Point(125,$h1)
$vROHostname.Add_TextChanged({ PAFConfig-FormUpdated })
$TransportSettingsVRO.Controls.Add($vROHostname)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SMTP server"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(280,$h)
$TransportSettingsVRO.Controls.Add($Label)

$vROSMTPServer = New-Object system.Windows.Forms.TextBox
$vROSMTPServer.multiline = $false
$vROSMTPServer.Width = 140
$vROSMTPServer.Height = 20
$vROSMTPServer.Text = ($global:Config.Mail).vROSMTPServer
$vROSMTPServer.Location = New-Object System.Drawing.Point(370,$h1)
$vROSMTPServer.Add_TextChanged({ PAFConfig-FormUpdated })
$TransportSettingsVRO.Controls.Add($vROSMTPServer)

#Set vertical offset
$h += 30
$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSH Username"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,$h)
$TransportSettingsVRO.Controls.Add($Label)

$vROSSHUser = New-Object system.Windows.Forms.TextBox
$vROSSHUser.multiline = $false
$vROSSHUser.Width = 140
$vROSSHUser.Height = 20
$vROSSHUser.Text = ($global:Config.Mail).vROSSHUser
$vROSSHUser.Location = New-Object System.Drawing.Point(125,$h1)
$vROSSHUser.Add_TextChanged({ PAFConfig-FormUpdated })
$TransportSettingsVRO.Controls.Add($vROSSHUser)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SSH Password"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(280,$h)
$TransportSettingsVRO.Controls.Add($Label)

$vROSSHPassword = New-Object system.Windows.Forms.MaskedTextBox
$vROSSHPassword.multiline = $false
$vROSSHPassword.Width = 140
$vROSSHPassword.Height = 20
$vROSSHPassword.PasswordChar = '*'
$vROSSHPassword.Text = ($global:Config.Mail).vROSSHPassword
$vROSSHPassword.Location = New-Object System.Drawing.Point(370,$h1)
$vROSSHPassword.Add_TextChanged({ PAFConfig-FormUpdated })
$TransportSettingsVRO.Controls.Add($vROSSHPassword)

#Set vertical offset
$h += 30
$Label15 = New-Object system.Windows.Forms.Label
$Label15.Text = "vRO Username"
$Label15.AutoSize = $true
$Label15.Location = New-Object System.Drawing.Point(10,$h)
$TransportSettingsVRO.Controls.Add($Label15)

$vROUser = New-Object system.Windows.Forms.TextBox
$vROUser.multiline = $false
$vROUser.Width = 140
$vROUser.Height = 20
$vROUser.Text = ($global:Config.Mail).vROUser
$vROUser.Location = New-Object System.Drawing.Point(125,$h1)
$vROUser.Add_TextChanged({ PAFConfig-FormUpdated })
$TransportSettingsVRO.Controls.Add($vROUser)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "vRO Password"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(280,$h)
$TransportSettingsVRO.Controls.Add($Label)

$vROPassword = New-Object system.Windows.Forms.MaskedTextBox
$vROPassword.multiline = $false
$vROPassword.Width = 140
$vROPassword.Height = 20
$vROPassword.PasswordChar = '*'
$vROPassword.Text = ($global:Config.Mail).vROPassword
$vROPassword.Location = New-Object System.Drawing.Point(370,$h1)
$vROPassword.Add_TextChanged({ PAFConfig-FormUpdated })
$TransportSettingsVRO.Controls.Add($vROPassword)

######SMTP Groupbox
$TransportSettingsSMTP = New-Object system.Windows.Forms.Groupbox
$TransportSettingsSMTP.size = New-Object System.Drawing.Point(520,105)
$TransportSettingsSMTP.Visible = $false
$TransportSettingsSMTP.Location = New-Object System.Drawing.Point(15,250)
$EmailSettings.Controls.Add($TransportSettingsSMTP)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "SMTP server"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(10,20)
$TransportSettingsSMTP.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(110,15)
$TransportSettingsSMTP.Controls.Add($Label)


$SMTPServer = New-Object system.Windows.Forms.TextBox
$SMTPServer.multiline = $false
$SMTPServer.Width = 385
$SMTPServer.Height = 20
$SMTPServer.Text = ($global:Config.Mail).SMTPServer
$SMTPServer.Location = New-Object System.Drawing.Point(125,15)
$SMTPServer.Add_TextChanged({ PAFConfig-FormUpdated })
$TransportSettingsSMTP.Controls.Add($SMTPServer)

$PictureBox = New-Object Windows.Forms.PictureBox
$PictureBox.Location = New-Object System.Drawing.Point(15,670)
$PictureBox.Width =  16
$pictureBox.Height =  16
$PictureBox.Image = [System.Convert]::FromBase64String($LoadKeyImg)
$ConfForm.Controls.Add($PictureBox)

$SelectedKeyPath = New-Object system.Windows.Forms.Label
$SelectedKeyPath.ForeColor = "red"
$SelectedKeyPath.Text = "No SSL certificate is selected"
$SelectedKeyPath.AutoSize = $true
$SelectedKeyPath.Location = New-Object System.Drawing.Point(40,670)
$ConfForm.Controls.Add($SelectedKeyPath)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "*"
$Label.Font = $BoldFont
$Label.ForeColor = "red"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(470,670)
$ConfForm.Controls.Add($Label)

$Label = New-Object system.Windows.Forms.Label
$Label.Text = "Mandatory fields"
$Label.AutoSize = $true
$Label.Location = New-Object System.Drawing.Point(480,670)
$ConfForm.Controls.Add($Label)

$ToolTip  = New-Object system.Windows.Forms.ToolTip
$ToolTip.isBalloon = $true
$ToolTip.ToolTipTitle = "Allowed patterns"
$ToolTip.InitialDelay = 100
$ToolTip.ReshowDelay    = 0
$ToolTip.AutoPopDelay  = 32000
$ToolTip.SetToolTip($ReportFileTemplate,"%HH% - hours (24h format),`n%hh% - hours (12h format),`n%mm% - minutes,`n%ss% - seconds,`n%dd% - day,`n%MM% - month (2 digit),`n%MMMM% - month (month),`n%yy% - year (2 digit format),`n%yyyy% - year (4 digit format)")

$ToolTip1  = New-Object system.Windows.Forms.ToolTip
$ToolTip1.isBalloon = $true
$ToolTip1.ToolTipTitle = "Allowed patterns"
$ToolTip1.InitialDelay = 100
$ToolTip1.ReshowDelay    = 0
$ToolTip1.AutoPopDelay  = 32000
$ToolTip1.SetToolTip($ReportLocation,"%HH% - hours (24h format),`n%hh% - hours (12h format),`n%mm% - minutes,`n%ss% - seconds,`n%dd% - day,`n%MM% - month (2 digit),`n%MMMM% - month (month),`n%yy% - year (2 digit format),`n%yyyy% - year (4 digit format)")


$MailingType.SelectedItem = "SMTP Server"
$global:ConfFormUpdated = $false
#Load security key

$global:SSLThumbprint = PAFConfig-LoadThumbprint

#[System.Windows.Forms.MessageBox]::Show($global:SSLThumbprint,"PAF Configuration") | out-null
[void]$ConfForm.ShowDialog()